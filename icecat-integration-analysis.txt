===== AN√ÅLISE COMPLETA DA INTEGRA√á√ÉO ICECAT =====

PROBLEMA IDENTIFICADO:
- Icecat API est√° rejeitando TODOS os GTINs com erro: "The GTIN can not be found"
- Fallback Google Shopping falha: apifyService.searchProducts is not a function

===== C√ìDIGO COMPLETO DA INTEGRA√á√ÉO ICECAT =====

==== 1. ARQUIVO: server/icecat.ts ====
import fetch from 'node-fetch';

interface IcecatProduct {
  id: string;
  name: string;
  description?: string;
  brand?: string;
  category?: string;
  images: string[];
}

interface IcecatGalleryItem {
  Pic?: string;
  Pic500x500?: string;
  ThumbPic?: string;
}

interface IcecatApiResponse {
  Gallery?: IcecatGalleryItem[];
  data?: {
    Gallery?: IcecatGalleryItem[];
    GeneralInfo?: {
      Title?: string;
      Description?: string;
      Brand?: string;
      Category?: {
        Name?: string;
      };
    };
  };
  GeneralInfo?: {
    Title?: string;
    Description?: string;
    Brand?: string;
    Category?: {
      Name?: string;
    };
  };
}

const ICECAT_API_BASE = 'https://live.icecat.biz/api';

/**
 * Busca produto no Icecat via GTIN/EAN/UPC
 */
export async function searchProductByGTIN(gtin: string): Promise<IcecatProduct | null> {
  try {
    console.log(`üîç Buscando produto no Icecat com GTIN: ${gtin}`);

    const headers = {
      'api_token': process.env.ICECAT_API_TOKEN!,
      'content_token': process.env.ICECAT_CONTENT_TOKEN!,
    };

    // Buscar apenas galeria para ter imagens
    const shopname = process.env.ICECAT_USER?.trim() || '';
    const cleanGtin = gtin.trim();
    const galleryUrl = `${ICECAT_API_BASE}?lang=PT&shopname=${encodeURIComponent(shopname)}&GTIN=${encodeURIComponent(cleanGtin)}&content=gallery`;
    
    console.log(`üì° Fazendo requisi√ß√£o para galeria: ${galleryUrl}`);
    const galleryResponse = await fetch(galleryUrl, { headers });
    
    if (!galleryResponse.ok) {
      const errorText = await galleryResponse.text();
      console.warn(`‚ö†Ô∏è Erro na API do Icecat (galeria): ${galleryResponse.status} ${galleryResponse.statusText}`);
      console.warn(`üìÑ Resposta de erro:`, errorText);
      console.warn(`üîß Headers enviados:`, JSON.stringify(headers, null, 2));
      return null;
    }

    const galleryData: IcecatApiResponse = await galleryResponse.json();
    console.log(`üì∏ Resposta da galeria:`, JSON.stringify(galleryData, null, 2));

    // Buscar informa√ß√µes gerais do produto
    const infoUrl = `${ICECAT_API_BASE}?lang=PT&shopname=${encodeURIComponent(shopname)}&GTIN=${encodeURIComponent(cleanGtin)}&content=essentialinfo`;
    
    console.log(`üì° Fazendo requisi√ß√£o para info: ${infoUrl}`);
    const infoResponse = await fetch(infoUrl, { headers });
    
    let infoData: IcecatApiResponse = {};
    if (infoResponse.ok) {
      infoData = await infoResponse.json();
      console.log(`üìã Resposta das informa√ß√µes:`, JSON.stringify(infoData, null, 2));
    }

    // Extrair galeria de imagens
    const gallery = galleryData.Gallery || galleryData?.data?.Gallery || [];
    const images = gallery
      .map(item => item.Pic)
      .filter(Boolean)
      .slice(0, 3); // M√°ximo 3 imagens

    console.log(`üñºÔ∏è Imagens encontradas: ${images.length}`);

    // Extrair informa√ß√µes do produto
    const generalInfo = infoData.GeneralInfo || infoData?.data?.GeneralInfo || {};
    
    const product: IcecatProduct = {
      id: gtin,
      name: generalInfo.Title || `Produto ${gtin}`,
      description: generalInfo.Description || '',
      brand: generalInfo.Brand || '',
      category: generalInfo.Category?.Name || 'Eletr√¥nicos',
      images
    };

    console.log(`‚úÖ Produto encontrado:`, product);
    return product;

  } catch (error) {
    console.error(`‚ùå Erro ao buscar produto no Icecat:`, error);
    return null;
  }
}

==== 2. ENDPOINT NO ROUTES.TS ====
// Buscar produto no Icecat via GTIN
app.get('/api/icecat/product/:gtin', isAuthenticated, async (req: any, res) => {
  try {
    const { gtin } = req.params;
    
    if (!gtin || gtin.length < 8) {
      return res.status(400).json({ message: "GTIN deve ter pelo menos 8 d√≠gitos" });
    }
    
    const { searchProductByGTIN } = await import('./icecat');
    const product = await searchProductByGTIN(gtin);
    
    if (!product) {
      return res.status(404).json({ message: "Produto n√£o encontrado no cat√°logo Icecat" });
    }
    
    res.json(product);
  } catch (error) {
    console.error("Error searching Icecat:", error);
    res.status(500).json({ message: "Erro ao buscar produto no Icecat" });
  }
});

==== 3. FRONTEND EM ADMIN-PRODUCTS.TSX ====
// Fun√ß√£o para buscar produto no Icecat via GTIN
const searchIcecatProduct = async () => {
  if (!gtinInput.trim() || gtinInput.length < 8) {
    toast({
      title: "GTIN inv√°lido",
      description: "Por favor, insira um c√≥digo GTIN/EAN v√°lido (m√≠nimo 8 d√≠gitos)",
      variant: "destructive",
    });
    return;
  }

  setIcecatSearching(true);

  try {
    // Primeiro tenta Icecat
    let response = await fetch(`/api/icecat/product/${gtinInput.trim()}`);
    
    let product;
    if (response.ok) {
      product = await response.json();
    } else {
      // Fallback: Busca via Google Shopping
      console.log('üîÑ Icecat falhou, tentando Google Shopping...');
      response = await fetch(`/api/products/search-by-gtin/${gtinInput.trim()}`);
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Produto n√£o encontrado em nenhuma base de dados");
      }
      
      product = await response.json();
    }

    // Preencher formul√°rio automaticamente
    form.setValue("name", product.name);
    form.setValue("description", product.description || "");
    form.setValue("category", product.category || "Eletr√¥nicos");
    form.setValue("imageUrl", product.images[0] || "");
    form.setValue("imageUrl2", product.images[1] || "");
    form.setValue("imageUrl3", product.images[2] || "");
    form.setValue("gtin", gtinInput.trim());
    form.setValue("brand", product.brand || "");
    form.setValue("sourceType", "icecat");
    form.setValue("showInTotem", true); // ‚úÖ Ativar totem automaticamente

    // Determinar a fonte dos dados
    const source = response.url?.includes('/icecat/') ? "Icecat" : "Google Shopping";
    
    toast({
      title: "‚úÖ Produto encontrado!",
      description: `${product.name} carregado via ${source} com ${product.images.length} imagens`,
    });

  } catch (error: any) {
    toast({
      title: "Produto n√£o encontrado",
      description: error.message || "N√£o foi poss√≠vel encontrar o produto no cat√°logo Icecat",
      variant: "destructive",
    });
  } finally {
    setIcecatSearching(false);
  }
};

==== 4. INTERFACE VISUAL NO JSX ====
{/* Busca no Icecat */}
<div className="bg-gradient-to-r from-blue-50 to-purple-50 p-5 rounded-lg border border-blue-200 shadow-sm">
  <h3 className="text-lg font-medium text-gray-800 mb-4 flex items-center">
    <Package className="w-5 h-5 mr-2 text-blue-600" />
    üîç Buscar Produto no Cat√°logo Icecat
  </h3>
  <div className="bg-white p-4 rounded-lg border border-blue-100">
    <div className="flex flex-col sm:flex-row gap-3">
      <div className="flex-1">
        <Label htmlFor="gtin-search" className="text-gray-700 font-medium text-sm">C√≥digo de Barras (GTIN/EAN/UPC)</Label>
        <Input
          id="gtin-search"
          value={gtinInput}
          onChange={(e) => setGtinInput(e.target.value)}
          placeholder="Ex: 7891234567890"
          className="mt-1 placeholder:text-gray-400 border-gray-300 focus:border-blue-500"
          data-testid="input-gtin-search"
        />
      </div>
      <div className="flex items-end">
        <Button
          type="button"
          onClick={searchIcecatProduct}
          disabled={icecatSearching || !gtinInput.trim()}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6"
          data-testid="button-search-icecat"
        >
          {icecatSearching ? "Buscando..." : "üîç Buscar"}
        </Button>
      </div>
    </div>
    <p className="text-xs text-gray-500 mt-2">
      ‚ú® Preenchimento autom√°tico: nome, descri√ß√£o, categoria e at√© 3 imagens oficiais + <strong>totem ativado</strong>
    </p>
  </div>
</div>

===== PROBLEMAS IDENTIFICADOS =====

1. **ICECAT API REJEITANDO GTINs**:
   - Status: 400 Bad Request
   - Erro: "The GTIN can not be found" 
   - Testado: 3614270670596, 194253420229
   - Poss√≠vel causa: Base limitada ou credenciais inadequadas

2. **FALLBACK GOOGLE SHOPPING QUEBRADO**:
   - Erro: apifyService.searchProducts is not a function
   - Causa: M√©todo n√£o existe no apifyService

3. **CREDENCIAIS ICECAT**:
   ‚úÖ ICECAT_API_TOKEN: 89e39860-6495-4f58-9ed3-2666a7630c77
   ‚úÖ ICECAT_CONTENT_TOKEN: 58212966-af86-4312-8c69-f9839424fbf8
   ‚úÖ ICECAT_USER: thiagofregolao

===== SOLU√á√ïES PROPOSTAS =====

1. **TESTAR CONTA ICECAT**:
   - Verificar se a conta tem acesso completo
   - Testar com produtos eletr√¥nicos espec√≠ficos
   - Verificar se precisa de outros par√¢metros

2. **CORRIGIR FALLBACK**:
   - Verificar se apifyService tem m√©todo correto
   - Implementar busca direta via Google Shopping
   - Usar API alternativa (EAN-Search.org)

3. **IMPLEMENTAR ALTERNATIVA**:
   - Usar API gratuita como EAN-Search.org
   - Implementar busca via nome como fallback
   - Criar preenchimento manual inteligente

===== STATUS ATUAL =====
‚ùå Icecat: N√£o funciona com nenhum GTIN
‚ùå Google Shopping: Erro de implementa√ß√£o
‚úÖ Interface: Completa e funcional
‚úÖ Backend: Estrutura correta