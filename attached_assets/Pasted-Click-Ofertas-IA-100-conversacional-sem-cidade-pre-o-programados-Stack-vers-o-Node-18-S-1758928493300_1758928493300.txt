Click Ofertas ‚Äî IA 100% conversacional (sem cidade/pre√ßo ‚Äúprogramados‚Äù)

Stack & vers√£o: Node 18+

Sem heur√≠stica, sem regras fixas de cidade/pre√ßo. O modelo (OpenAI) entende a inten√ß√£o do usu√°rio e decide quando chamar a tool buscarOfertas({ query }). Se o usu√°rio diz ‚Äúiphone‚Äù, a IA chama a tool com {query:"iphone"}, recebe seus itens e responde de forma natural/humorada.

√Årvore de diret√≥rios
click-ofertas-conversa-pura/
‚îú‚îÄ src/
‚îÇ  ‚îú‚îÄ server.js          # Express API
‚îÇ  ‚îú‚îÄ ai/
‚îÇ  ‚îÇ  ‚îú‚îÄ chat.js         # Orquestra a conversa (tool calling puro, sem heur√≠stica)
‚îÇ  ‚îÇ  ‚îî‚îÄ openai.js       # Client OpenAI
‚îÇ  ‚îî‚îÄ services/
‚îÇ     ‚îî‚îÄ catalog.js      # <-- coloque aqui seus modelos/produtos reais
‚îú‚îÄ .replit
‚îú‚îÄ replit.nix
‚îú‚îÄ package.json
‚îî‚îÄ README.md

// package.json
{
  "name": "click-ofertas-conversa-pura",
  "version": "1.0.0",
  "type": "module",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "node --watch src/server.js",
    "test": "node -e \"console.log('ok')\""
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "openai": "^4.56.0"
  }
}

# .replit
run = "npm install && npm run start"

# replit.nix
{ pkgs }: {
  deps = [ pkgs.nodejs-18_x pkgs.nodePackages.npm ];
}

// src/ai/openai.js
import OpenAI from "openai";
export const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// src/services/catalog.js
/**
 * ‚úÖ Troque esta lista pelos seus modelos/produtos reais.
 * Campo m√≠nimo: { id, titulo, preco } ‚Äî voc√™ pode adicionar "link", "marca", etc.
 */
const CATALOGO = [
  // EXEMPLOS ‚Äî substitua pelos seus
  { id: "P1", titulo: "iPhone 13 128GB", preco: 980, link: "#" },
  { id: "P2", titulo: "iPhone 12 64GB", preco: 750, link: "#" },
  { id: "P3", titulo: "iPhone 15 128GB", preco: 1200, link: "#" },
  { id: "P4", titulo: "Galaxy S23 256GB", preco: 900, link: "#" },
  { id: "P5", titulo: "Perfume Lanc√¥me La Vie Est Belle", preco: 130, link: "#" }
];

/**
 * üîé Busca simples por "query" (sem cidade/pre√ßo).
 * Nenhuma heur√≠stica: s√≥ filtra por t√≠tulo/marca/categoria se voc√™ adicionar.
 */
export async function buscarOfertas({ query, maxResultados = 12 } = {}) {
  const q = String(query || "").toLowerCase().trim();
  if (!q) return []; // sem query ‚Üí sem itens (IA decide o que dizer)
  let arr = CATALOGO.filter(p =>
    p.titulo.toLowerCase().includes(q)
  );
  // ranking bem simples por pre√ßo (voc√™ pode trocar)
  arr.sort((a, b) => a.preco - b.preco);
  return arr.slice(0, Math.max(1, Math.min(50, maxResultados)));
}

export { CATALOGO };

// src/ai/chat.js
/**
 * IA 100% conversacional (nada programado de cidade/pre√ßo).
 * O modelo decide quando chamar a tool `buscarOfertas({query})`.
 * Texto final natural/humorado vem do pr√≥prio modelo.
 */
import { openai } from "./openai.js";
import { buscarOfertas } from "../services/catalog.js";

const SYSTEM_STYLE = `
Voc√™ √© o Assistente do Click Ofertas.
Fale em PT-BR, tom humano e leve (humor sutil, no m√°x 1 emoji).
Quando detectar inten√ß√£o de compra (ex.: "iphone", "perfume"), chame a ferramenta buscarOfertas passando {query}.
Liste produtos em bullets: T√≠tulo ‚Äî US$pre√ßo. Se n√£o houver itens, explique curto e convide a especificar o modelo.
N√£o invente produtos. Use somente os retornados pela ferramenta.
`.trim();

const TOOLS = [
  {
    type: "function",
    function: {
      name: "buscarOfertas",
      description: "Busca ofertas por termo (query). Retorna array de produtos do cat√°logo.",
      parameters: {
        type: "object",
        properties: {
          query: { type: "string", description: "termo de busca, ex.: 'iphone', 'perfume'" },
          maxResultados: { type: "integer", default: 12, minimum: 1, maximum: 50 }
        },
        required: ["query"]
      }
    }
  }
];

export async function chatOnce({ message }) {
  const msgs = [
    { role: "system", content: SYSTEM_STYLE },
    { role: "user", content: message }
  ];

  // loop curto (o modelo pode chamar a tool 1‚Äì2x antes de responder)
  for (let turn = 0; turn < 3; turn++) {
    const resp = await openai.chat.completions.create({
      model: process.env.CHAT_MODEL || "gpt-4o-mini",
      temperature: 0.5,
      messages: msgs,
      tools: TOOLS,
      tool_choice: "auto"
    });

    const choice = resp.choices?.[0];
    const m = choice?.message;
    const toolCalls = m?.tool_calls || [];

    // Se o modelo pediu tool(s), executamos e devolvemos o resultado (JSON string)
    if (toolCalls.length > 0) {
      for (const call of toolCalls) {
        if (call.type === "function" && call.function?.name === "buscarOfertas") {
          let args = {};
          try { args = JSON.parse(call.function.arguments || "{}"); } catch {}
          const produtos = await buscarOfertas(args);

          // devolve ao modelo (role:"tool") ‚Äî o modelo decide como responder
          msgs.push({
            role: "tool",
            tool_call_id: call.id,
            name: "buscarOfertas",
            content: JSON.stringify({ data: produtos })
          });
        }
      }
      continue; // volta pro modelo integrar os dados e redigir a resposta final
    }

    // Sem tool-calls ‚áí resposta final totalmente gerada pela IA
    const text = m?.content?.trim() || "Hum‚Ä¶ me d√° s√≥ o nome do produto (ex.: 'iphone') que eu busco üòâ";
    // Opcional: mandar os produtos para a UI (pega o √∫ltimo tool_result, se houve)
    const lastTool = [...msgs].reverse().find(x => x.role === "tool" && x.name === "buscarOfertas");
    const ofertas = lastTool ? JSON.parse(lastTool.content).data : [];

    return { text, ofertas };
  }

  return { text: "Dei uma travadinha aqui üòÖ manda o nome do produto e eu procuro!", ofertas: [] };
}

// src/server.js
import express from "express";
import cors from "cors";
import { chatOnce } from "./ai/chat.js";
import { CATALOGO } from "./services/catalog.js";

const app = express();
app.use(cors());
app.use(express.json({ limit: "1mb" }));

app.get("/health", (_req, res) => res.json({ ok: true, items: CATALOGO.length }));

/**
 * POST /ai/chat
 * body: { message: string }
 * resp: { text: string, ofertas?: Array<{id,titulo,preco,link?}> }
 */
app.post("/ai/chat", async (req, res) => {
  try {
    const { message } = req.body || {};
    if (!message || typeof message !== "string") {
      return res.status(400).json({ error: "message obrigat√≥rio" });
    }
    const result = await chatOnce({ message });
    res.json(result);
  } catch (e) {
    console.error(e);
    res.status(500).json({ text: "Ops! Dei uma trope√ßada ü§π Tenta de novo?", ofertas: [] });
  }
});

// Demo r√°pida
app.get("/", (_req, res) => {
  res.type("html").send(`
  <meta charset="utf-8" />
  <h2>Click Ofertas ‚Äî IA conversacional (pura)</h2>
  <p>Ex.: <code>iphone</code> | <code>galaxy</code> | <code>perfume</code></p>
  <input id="msg" style="width:420px" placeholder="digite: iphone" />
  <button onclick="send()">Enviar</button>
  <pre id="out" style="white-space:pre-wrap"></pre>
  <script>
  async function send(){
    const r = await fetch('/ai/chat',{method:'POST',headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ message: document.getElementById('msg').value })});
    document.getElementById('out').textContent = JSON.stringify(await r.json(), null, 2);
  }
  </script>`);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("Click Ofertas IA em http://localhost:"+PORT));

// README.md
# Click Ofertas ‚Äî IA 100% conversacional (tool calling puro)

## ENV
- `OPENAI_API_KEY` = "YOUR_API_KEY"
- (opcional) `CHAT_MODEL` = "gpt-4o-mini" | "gpt-4.1-mini" etc.

## Como funciona
- O usu√°rio fala livre (‚Äúiphone‚Äù, ‚Äúperfume‚Äù, etc.).
- A IA entende a inten√ß√£o e **chama a tool** `buscarOfertas({query})`.
- O backend retorna **apenas** os itens do seu cat√°logo.
- A IA redige a resposta natural/humorada e lista os produtos.

## Integra√ß√£o
- Frontend chama `POST /ai/chat` com `{ "message": "iphone" }`.
- Renderize `text` no chat e `ofertas` na tela de produtos.
- **Coloque seus produtos em `src/services/catalog.js`** (ou troque por sua consulta de DB/API mantendo assinatura).

## Observa√ß√µes
- Sem cidade/pre√ßo ‚Äúprogramados‚Äù: a IA decide tudo.
- Se `query` vier vazia, a tool retorna `[]` e a IA pede o nome do produto de forma natural.

Como rodar (Replit)

Crie um Repl Node, cole os arquivos.

Em Secrets, adicione OPENAI_API_KEY.

Run.

Teste: POST /ai/chat com {"message":"iphone"}.