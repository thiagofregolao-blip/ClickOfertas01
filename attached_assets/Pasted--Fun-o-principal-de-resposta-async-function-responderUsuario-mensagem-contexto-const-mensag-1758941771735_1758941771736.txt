// Fun√ß√£o principal de resposta
async function responderUsuario(mensagem, contexto) {
  const mensagemSanitizada = limparTexto(mensagem);
  const intencaoFollowUp = detectarIntencaoFollowUp(mensagemSanitizada);

  // Se for uma resposta ap√≥s mostrar produtos
  if (intencaoFollowUp) {
    return responderFollowUp(intencaoFollowUp);
  }

  // Detecta se a mensagem √© vaga
  const precisaContexto = regexVaga.test(mensagemSanitizada);
  const contextoEnriquecido = precisaContexto ? enriquecerContexto(contexto) : contexto;

  // Chamada √† API Gemini
  try {
    const respostaGemini = await chamarGemini(mensagemSanitizada, contextoEnriquecido);
    return formatarResposta(respostaGemini);
  } catch (erro) {
    console.warn("Erro na API Gemini:", erro);
    const produtos = await buscarProdutos(mensagemSanitizada);
    return mostrarProdutosComPrompt(produtos);
  }
}

// Detecta inten√ß√£o de follow-up
function detectarIntencaoFollowUp(mensagem) {
  const msg = mensagem.toLowerCase();
  if (msg.includes("gostei") || msg.includes("quero esse") || msg.includes("vou levar")) {
    return "confirmar_escolha";
  }
  if (msg.includes("n√£o gostei") || msg.includes("mostra outros") || msg.includes("tem mais")) {
    return "rejeitar_opcoes";
  }
  if (msg.includes("128gb") || msg.includes("cor preta") || msg.includes("mais barato")) {
    return "refinar_busca";
  }
  return null;
}

// Responde com base na inten√ß√£o
function responderFollowUp(intencao) {
  switch (intencao) {
    case "confirmar_escolha":
      return "√ìtima escolha! Posso te ajudar a finalizar ou mostrar acess√≥rios compat√≠veis üõçÔ∏è";
    case "rejeitar_opcoes":
      return "Sem problemas! Vou buscar outras op√ß√µes que talvez te agradem mais üîÑ";
    case "refinar_busca":
      return "Entendi! Vou ajustar a busca com base no que voc√™ quer üîç";
    default:
      return "Se quiser refinar ou ver mais, √© s√≥ me dizer üòâ";
  }
}

// Mostra produtos com uma pergunta leve
function mostrarProdutosComPrompt(produtos) {
  const lista = formatarListaProdutos(produtos);
  return `${lista}\n\nGostou de algum? Posso te ajudar a escolher üòä`;
}

// Fun√ß√µes auxiliares (mantidas do seu c√≥digo original)
function limparTexto(texto) {
  return texto.trim().replace(/[^\w\s]/gi, "").toLowerCase();
}

function enriquecerContexto(contexto) {
  return contexto + " | usu√°rio est√° buscando algo espec√≠fico";
}

function formatarListaProdutos(produtos) {
  return produtos.map((p, i) => `${i + 1}. ${p.nome} - ${p.preco}`).join("\n");
}

async function buscarProdutos(query) {
  // Mant√©m sua l√≥gica de busca original
  return await chamarBuscaGemini(query);
}
