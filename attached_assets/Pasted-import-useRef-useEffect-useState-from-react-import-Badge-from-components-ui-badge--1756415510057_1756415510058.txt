import { useRef, useEffect, useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Clock, Sparkles, CheckCircle, Download, Share2 } from 'lucide-react';
import { Product } from '@shared/schema';
import { useMutation, useQuery } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import jsPDF from 'jspdf';

// Fun√ß√£o auxiliar para API requests (assumindo que voc√™ tem uma fun√ß√£o apiRequest, sen√£o use fetch)
const apiRequest = async (url: string, method: string = 'GET') => {
  const response = await fetch(url, {
    method,
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
  });
  if (!response.ok) throw new Error(`Erro: ${response.status}`);
  return response;
};

interface ScratchCardProps {
  product: Product;
  currency: string;
  onRevealed?: (product: Product) => void;
}

// Fun√ß√£o para formatar pre√ßo
const formatPriceWithCurrency = (price: string, currency: string): string => {
  const formattedPrice = parseFloat(price).toFixed(2).replace('.', ',');
  return `${currency}$ ${formattedPrice}`;
};

export default function ScratchCard({ product, currency, onRevealed }: ScratchCardProps) {
  // Estados
  const [isRevealed, setIsRevealed] = useState(false);
  const [scratchProgress, setScratchProgress] = useState(0);
  const [timeLeft, setTimeLeft] = useState<number | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [isFading, setIsFading] = useState(false);
  const [coupon, setCoupon] = useState<any>(null);
  const [couponGenerated, setCouponGenerated] = useState(false);
  const [showCouponModal, setShowCouponModal] = useState(false);

  // Refs
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const scratchedAreas = useRef<Array<{ x: number; y: number; radius: number }>>([]);
  const { toast } = useToast();

  // FASE 1: AudioContext otimizado
  const audioCtxRef = useRef<AudioContext | null>(null);
  const lastSoundTime = useRef<number>(0);
  const SOUND_COOLDOWN = 120; // ms

  // FASE 2: Progresso por alpha real e tra√ßado cont√≠nuo
  const rafId = useRef<number | null>(null);
  const needsProgressCalc = useRef<boolean>(false);
  const lastPoint = useRef<{ x: number; y: number } | null>(null);

  // NOVA: Query para checar status de scratch (GET)
  const { data: scratchStatus, isLoading: isStatusLoading } = useQuery({
    queryKey: ['scratchStatus', product.id],
    queryFn: async () => {
      const response = await apiRequest(`/api/products/${product.id}/scratch-status`);
      return response.json(); // Espera { isScratched: boolean, expiresAt?: string, coupon?: any }
    },
    onSuccess: (data) => {
      if (data.isScratched) {
        setIsRevealed(true);
        if (data.expiresAt) {
          const expirationTime = new Date(data.expiresAt).getTime();
          const now = Date.now();
          setTimeLeft(Math.max(0, Math.floor((expirationTime - now) / 1000)));
        }
        if (data.coupon) {
          setCoupon(data.coupon);
          setCouponGenerated(true);
        }
      }
    },
    enabled: !!product.id, // S√≥ roda se product.id existir
  });

  // Mutation para marcar produto como "raspado" (POST, inalterada)
  const scratchMutation = useMutation({
    mutationFn: async (productId: string) => {
      const response = await apiRequest(`/api/products/${productId}/scratch`, 'POST');
      return response.json();
    },
    onSuccess: (data: any) => {
      if (data?.expiresAt) {
        const expirationTime = new Date(data.expiresAt).getTime();
        const now = Date.now();
        setTimeLeft(Math.max(0, Math.floor((expirationTime - now) / 1000)));
      }
      if (onRevealed) onRevealed(product);
    },
  });

  // Mutation para gerar cupom (inalterada, mas agora checa se j√° gerado via query)
  const generateCouponMutation = useMutation({
    mutationFn: async (productId: string) => {
      const response = await fetch(`/api/products/${productId}/generate-coupon`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`${response.status}: ${error}`);
      }
      
      return await response.json();
    },
    onSuccess: (data: any) => {
      if (data?.success && data?.coupon) {
        setCoupon(data.coupon);
        setCouponGenerated(true);
        setShowModal(false);
        setShowCouponModal(true);
        
        toast({
          title: "üéâ Cupom gerado!",
          description: "Veja os detalhes do seu cupom!",
          duration: 3000,
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: "Erro ao gerar cupom",
        description: `Erro: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // Timer countdown (inalterado)
  useEffect(() => {
    if (timeLeft === null || timeLeft <= 0) return;

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev === null || prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft]);

  // Configura√ß√£o do canvas (agora s√≥ roda se !isRevealed)
  useEffect(() => {
    if (isRevealed || isStatusLoading || !canvasRef.current) return; // Skip se j√° revelado ou carregando status
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Reset estado ao mudar produto (mas s√≥ se n√£o revelado)
    scratchedAreas.current = [];
    setScratchProgress(0);
    setIsFading(false);
    lastPoint.current = null;
    needsProgressCalc.current = false;

    // Configurar DPI correto para telas retina
    const rect = canvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;
    
    canvas.width = Math.round(rect.width * dpr);
    canvas.height = Math.round(rect.height * dpr);
    
    ctx.scale(dpr, dpr);

    // Desenhar camada de cobertura metalizada
    const gradient = ctx.createLinearGradient(0, 0, rect.width, rect.height);
    gradient.addColorStop(0, '#c0c0c0');
    gradient.addColorStop(0.2, '#e8e8e8');
    gradient.addColorStop(0.4, '#b8b8b8');
    gradient.addColorStop(0.6, '#d8d8d8');
    gradient.addColorStop(0.8, '#a8a8a8');
    gradient.addColorStop(1, '#c8c8c8');

    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, rect.width, rect.height);

    // Adicionar textura metalizada
    for (let i = 0; i < 15; i++) {
      const lineY = (rect.height / 15) * i;
      ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 + Math.random() * 0.15})`;
      ctx.lineWidth = 0.8;
      ctx.beginPath();
      ctx.moveTo(0, lineY);
      ctx.lineTo(rect.width, lineY + Math.random() * 4 - 2);
      ctx.stroke();
    }

    // Texto de instru√ß√£o
    ctx.fillStyle = 'rgba(80, 80, 80, 0.9)';
    ctx.font = 'bold 16px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('üëÜ RASPE AQUI', rect.width / 2, rect.height / 2 - 10);
    
    ctx.font = '12px Arial, sans-serif';
    ctx.fillStyle = 'rgba(100, 100, 100, 0.8)';
    ctx.fillText('Descubra sua oferta!', rect.width / 2, rect.height / 2 + 15);

    // Configurar blend mode para apagar
    ctx.globalCompositeOperation = 'destination-out';
    
  }, [product.id, isRevealed, isStatusLoading]); // Adicionado isRevealed e isStatusLoading na depend√™ncia

  // Restante do c√≥digo inalterado (playScratchSound, calculateProgressOptimized, drawScratchCircle, drawScratchLine, handlers de mouse/touch, formatTimeLeft, downloadPDF, shareOnWhatsApp, ProductModal, renders)...

  // NOVA: Adicionar loading state enquanto checa status
  if (isStatusLoading) {
    return <div className="flex items-center justify-center min-h-[200px]">Carregando...</div>;
  }

  // Render do produto revelado (inalterado, mas agora isRevealed pode vir da query)
  if (isRevealed) {
    // ... (o mesmo c√≥digo de if (isRevealed) ...)
  }

  // Render do card para raspar (inalterado, mas agora s√≥ se !isRevealed)
  return (
    // ... (o mesmo c√≥digo de return para o canvas)
  );
}