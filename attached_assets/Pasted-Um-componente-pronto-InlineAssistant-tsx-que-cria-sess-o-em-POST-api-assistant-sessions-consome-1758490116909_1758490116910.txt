Um componente pronto InlineAssistant.tsx que:

cria sess√£o em POST /api/assistant/sessions;

consome o chat por stream via POST /api/assistant/stream (sem EventSource);

mostra sauda√ß√£o + chat embutido na pr√≥pria barra (expande pouco, com scroll);

renderiza at√© 3 recomendados √† direita;

joga o restante dos resultados numa lista abaixo do card.

Um patch de backend do endpoint /api/assistant/sessions para j√° retornar greeting + suggest (produtos iniciais).

A√≠ √© s√≥ colar e testar. üëá

1) Front ‚Äî web/InlineAssistant.tsx (plug-and-play)
// web/InlineAssistant.tsx
/**
 * InlineAssistant
 * - Barra de busca que expande levemente ao focar.
 * - Chat embutido no MESMO card (scroll interno).
 * - At√© 3 produtos recomendados na coluna direita.
 * - Restante dos resultados aparece ABAIXO do card, fora do chat.
 *
 * Endpoints esperados:
 *  - POST /api/assistant/sessions          ‚Üí { session: {id}, greeting, suggest }
 *  - POST /api/assistant/stream            ‚Üí SSE via corpo (data: {type:'chunk', text})
 *  - GET  /suggest?q=...                   ‚Üí { products: [...] }  (ajuste p/ /api/suggest se necess√°rio)
 */

import React, { useEffect, useMemo, useRef, useState } from 'react';

type Product = { id:string; title:string; category?:string; price?:{ USD?: number }, score?:number };
type SuggestResponse = { ok?:boolean; products: Product[] };

export default function InlineAssistant() {
  // identidade b√°sica (seu login deve popular isso; aqui tem fallback p/ testes)
  const uid = useMemo(() => localStorage.getItem('uid') || (localStorage.setItem('uid','u-'+Math.random().toString(36).slice(2,8)), localStorage.getItem('uid')!), []);
  const userName = useMemo(() => localStorage.getItem('userName') || 'Cliente', []);

  // estado UI
  const [expanded, setExpanded] = useState(false);
  const [input, setInput] = useState('');
  const [sessionId, setSessionId] = useState('');
  const [greeting, setGreeting] = useState('');             // sauda√ß√£o imediata
  const [streamingText, setStreamingText] = useState('');   // texto que ‚Äúvai digitando‚Äù
  const [recommended, setRecommended] = useState<Product[]>([]); // 3 da coluna
  const [feed, setFeed] = useState<Product[]>([]);          // lista abaixo
  const [loadingSug, setLoadingSug] = useState(false);

  // reader do streaming (POST /api/assistant/stream)
  const readerRef = useRef<ReadableStreamDefaultReader<Uint8Array> | null>(null);

  // cria sess√£o ao montar (traz greeting + suggest)
  useEffect(() => {
    (async () => {
      const r = await fetch('/api/assistant/sessions', { method:'POST' });
      const d = await r.json();
      const sid = d?.session?.id || d?.sessionId || d?.id;
      setSessionId(sid || '');
      if (d.greeting) setGreeting(d.greeting);
      const prods: Product[] = d?.suggest?.products || [];
      setRecommended(prods.slice(0,3));
      setFeed(prods.slice(3));
    })();
  }, []);

  function onFocus() {
    setExpanded(true);
    // opcional: iniciar com "oi" streamando
    if (sessionId) startStream('oi');
  }

  async function onChange(q:string){
    setInput(q);
    const term = q.trim();
    if (!term) { setFeed([]); return; }
    try{
      setLoadingSug(true);
      const r = await fetch(`/suggest?q=${encodeURIComponent(term)}`); // ajuste para /api/suggest se seu back usa /api
      const d: SuggestResponse = await r.json();
      const prods = d?.products || [];
      setRecommended(prods.slice(0,3));
      setFeed(prods.slice(3));
    } finally {
      setLoadingSug(false);
    }
  }

  async function onSubmit(e:React.FormEvent){
    e.preventDefault();
    const q = input.trim(); if (!q || !sessionId) return;
    startStream(q);
  }

  async function startStream(message: string) {
    // encerra stream anterior
    if (readerRef.current) { try { await readerRef.current.cancel(); } catch {} readerRef.current = null; }
    setStreamingText('');

    const response = await fetch('/api/assistant/stream', {
      method: 'POST',
      headers: { 'Content-Type':'application/json', 'Accept':'text/event-stream' },
      body: JSON.stringify({ sessionId, message, context: null })
    });
    if (!response.ok || !response.body) return;

    const reader = response.body.getReader();
    readerRef.current = reader;
    const decoder = new TextDecoder();
    let buffer = '';

    while (true) {
      const { value, done } = await reader.read();
      if (done) break;
      buffer += decoder.decode(value, { stream: true });
      const parts = buffer.split('\n\n');
      buffer = parts.pop() || '';
      for (const chunk of parts) {
        const line = chunk.trim().replace(/^data:\s?/, '');
        try {
          const payload = JSON.parse(line);
          if (payload.type === 'chunk' && payload.text) {
            setStreamingText(prev => prev + payload.text);
          }
        } catch {
          // se vier texto puro
          setStreamingText(prev => prev + line);
        }
      }
    }
  }

  return (
    <div className="w-full">
      {/* GRID: barra+chat embutido √† esquerda / recomendados √† direita */}
      <div className="grid grid-cols-12 gap-4">
        {/* ESQUERDA: barra + chat embutido no MESMO card */}
        <div className="col-span-12 lg:col-span-9 min-h-0">
          <div className={`rounded-2xl border bg-white/80 backdrop-blur p-3 shadow-sm transition-all min-h-0
            ${expanded ? 'shadow-[0_0_0_8px_rgba(99,102,241,0.12)]' : ''}`}>
            {/* Barra integrada */}
            <form onSubmit={onSubmit}
              className={`flex items-center gap-2 rounded-2xl px-4 transition-all bg-white shadow
              ${expanded ? 'py-3 scale-[1.01]' : 'py-2'}`}>
              <div className="w-7 h-7 rounded-full bg-gradient-to-br from-indigo-500 to-purple-500 text-white grid place-content-center text-xs">C</div>
              <input
                value={input}
                onChange={(e)=> onChange(e.target.value)}
                onFocus={onFocus}
                placeholder="Fale com o Click (ex.: iPhone 15 em CDE)"
                className="flex-1 outline-none text-base"
              />
              <button className="px-3 py-1.5 rounded-lg bg-black text-white hover:opacity-90" type="submit">Buscar</button>
            </form>

            {/* Chat embutido com SCROLL (altura fixa, rola internamente) */}
            <div className="mt-3">
              <div className="text-xs text-gray-500 mb-1">Click Assistant</div>
              <div className="rounded-xl bg-gray-50 border p-3 max-h-[220px] overflow-auto">
                <div className="whitespace-pre-wrap">
                  {greeting ? `${greeting}\n` : ''}
                  {streamingText}
                </div>
              </div>
              {loadingSug && <div className="text-xs text-gray-500 mt-2">Buscando ofertas‚Ä¶</div>}
            </div>
          </div>

          {/* FEED abaixo do card (resto dos resultados) */}
          <div className="mt-4">
            <ResultsFeed items={feed} />
          </div>
        </div>

        {/* DIREITA: at√© 3 produtos recomendados */}
        <div className="col-span-12 lg:col-span-3">
          <div className="rounded-2xl border bg-white/80 backdrop-blur p-4 shadow-sm">
            <div className="text-sm font-semibold mb-2">Produtos Recomendados</div>
            {!recommended.length && <div className="text-xs text-gray-500">Converse comigo e vou recomendar os melhores produtos!</div>}
            <div className="grid gap-3">
              {recommended.slice(0,3).map((p)=>(
                <div key={p.id} className="p-3 rounded-xl border hover:shadow-sm transition">
                  <div className="font-medium truncate mb-1">{p.title}</div>
                  <div className="text-xs text-gray-500 mb-2">{p.category || '‚Äî'} {p.score!==undefined ? `‚Ä¢ score ${p.score}` : ''}</div>
                  <div className="text-sm">{p.price?.USD ? <>USD <b>{p.price.USD}</b></> : <span className="text-gray-400">sem pre√ßo</span>}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

/** Lista de resultados (abaixo do card) */
function ResultsFeed({ items }: { items: Product[] }){
  if (!items?.length) {
    return (
      <div className="rounded-2xl border bg-white/80 backdrop-blur p-4 shadow-sm">
        <div className="text-sm text-gray-500">Os resultados completos aparecer√£o aqui conforme voc√™ digitar.</div>
      </div>
    );
  }
  return (
    <div className="rounded-2xl border bg-white/80 backdrop-blur p-4 shadow-sm">
      <div className="text-sm font-semibold mb-3">Resultados</div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
        {items.map(p=>(
          <div key={p.id} className="p-3 rounded-xl border hover:shadow-sm transition">
            <div className="font-medium truncate mb-1">{p.title}</div>
            <div className="text-xs text-gray-500 mb-2">{p.category || '‚Äî'} {p.score!==undefined ? `‚Ä¢ score ${p.score}` : ''}</div>
            <div className="text-sm">{p.price?.USD ? <>USD <b>{p.price.USD}</b></> : <span className="text-gray-400">sem pre√ßo</span>}</div>
          </div>
        ))}
      </div>
    </div>
  );
}


Se o seu endpoint de sugest√µes for /api/suggest, troque a linha do fetch:
const r = await fetch(\/api/suggest?q=${encodeURIComponent(term)}`);`

2) Back ‚Äî patch no /api/assistant/sessions (retorna suggest)
// src/routes/assistant.ts (ou onde voc√™ cria a sess√£o)
app.post('/api/assistant/sessions', async (req, res) => {
  try {
    const session = { id: 'sess-' + Math.random().toString(36).slice(2,10) };

    // gere sua sauda√ß√£o (se j√° tiver mem√≥ria, use; sen√£o simples):
    const name = (req.headers['x-user-name'] as string) || 'Cliente';
    const greeting = `Ol√°, ${name}! Boa ${new Date().getHours()<12?'manh√£':(new Date().getHours()<18?'tarde':'noite')} üëã`;

    // PEGAR sugest√µes iniciais (trending ou √∫ltimo interesse do usu√°rio)
    const s = await fetch(`${req.protocol}://${req.get('host')}/suggest?q=trending`).then(r=>r.json());

    return res.status(201).json({
      success: true,
      session,
      greeting,
      suggest: s // ‚Üê enviado para o front pintar 3 √† direita + feed abaixo
    });
  } catch (e) {
    console.error(e);
    return res.status(201).json({ success:true, session:{ id:'sess-'+Math.random().toString(36).slice(2,10) }, greeting:'Ol√°! üëã' });
  }
});


J√° deixe o seu /api/assistant/stream com respostas curtas (max 220 tokens) e ‚Äúsoft-cut‚Äù pra n√£o virar text√£o, como combinamos.

Como validar r√°pido

Coloque o InlineAssistant no topo da p√°gina, no lugar do modal antigo.

Abra logado (defina no console se precisar):

localStorage.setItem('uid','u-123'); localStorage.setItem('userName','Thiago');


Ao focar a barra: ela expande, aparece sauda√ß√£o no card e o texto passa a streamar;

Na coluna direita: at√© 3 recomendados; o resto desce pro feed abaixo;

Digitando, /suggest atualiza os cart√µes.