Boa! Li o seu arquivo teste-ia-completo-detalhado.txt. A arquitetura de 3 n√≠veis (Pexels+Sharp ‚Üí Sharp puro ‚Üí IA) est√° bem pensada e, em geral, correta. Abaixo v√£o os pontos que eu ajustaria para ficar redondo e evitar os erros/efeitos que voc√™ relatou. 

teste-ia-completo-detalhado

O que est√° OK

L√≥gica condicional dos 3 n√≠veis (usa IA s√≥ quando customPrompt existe).

Composi√ß√£o com Sharp em 1920√ó1080 e texto sobreposto (resolve ‚Äútexto torto‚Äù da IA).

Busca no Pexels e fallback limpo quando n√£o h√° PEXELS_API_KEY.

Ajustes cr√≠ticos (recomendo fazer j√°)

Garante que esse m√≥dulo est√° em produ√ß√£o
Pelos seus prints ‚ÄúHugging Face / GenerateContent / 403‚Äù, ainda existe c√≥digo antigo sendo chamado. Confirme na sua rota que voc√™ exporta e chama generatePromotionalArt(...) deste arquivo e n√£o outra fun√ß√£o com nome igual/antigo. (No seu texto de diagn√≥stico isso j√° aparece como causa prov√°vel.)

generateImage n√£o est√° no arquivo
Voc√™ chama generateImage(customPrompt, outputPath) mas a fun√ß√£o n√£o est√° definida aqui. Se ela estiver em outro m√≥dulo, √≥timo; se n√£o, adicione uma vers√£o Vertex AI (nada de /endpoints:predict nem ?key=):

// exemplo m√≠nimo (Vertex AI - GenerateContent)
import fetch from "node-fetch";
import { GoogleAuth } from "google-auth-library";

async function generateImage(prompt, outputPath) {
  const PROJECT_ID = process.env.GCLOUD_PROJECT;
  const LOCATION = "us-central1";
  const MODEL = "gemini-2.5-flash-image";

  const auth = new GoogleAuth({ scopes: "https://www.googleapis.com/auth/cloud-platform" });
  const client = await auth.getClient();
  const { token } = await client.getAccessToken();

  const url = `https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${MODEL}:generateContent`;

  const r = await fetch(url, {
    method: "POST",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body: JSON.stringify({ contents: [{ role: "user", parts: [{ text: prompt }]}] })
  });

  const txt = await r.text();
  if (!r.ok) throw new Error(`Vertex ${r.status}: ${txt}`);

  const json = JSON.parse(txt);
  const part = json?.candidates?.[0]?.content?.parts?.find(p => p.inlineData);
  if (!part) throw new Error("Sem imagem no retorno");

  const buf = Buffer.from(part.inlineData.data, "base64");
  await (await import("fs")).promises.writeFile(outputPath, buf);
}


IAM/403 ‚Äúaiplatform.endpoints.predict‚Äù
Esse 403 aparece quando a chamada n√£o est√° no formato acima (ou a SA n√£o √© a usada no processo).

URL: precisa ser /publishers/google/models/...:generateContent (nada de /endpoints/...:predict).

Papeis na SA: Vertex AI User + Service Usage Consumer (e confirme no log quem √© a credencial em uso com auth.getCredentials().client_email).

Pre√ßo e localidade
$${price} vai imprimir ‚Äú$123‚Äù sem formata√ß√£o. Use BRL quando for Brasil:

const preco = new Intl.NumberFormat("pt-BR", { style: "currency", currency: "BRL"}).format(price);


‚Ä¶e troque no SVG.

Fonts/emoji com Sharp
Arial pode n√£o existir no host; e emoji pode falhar.

Troque font-family para uma fam√≠lia segura (ex.: sans-serif) ou incorpore uma fonte via SVG/@font-face.

Para o ‚Äúüì±‚Äù, prefira um √≠cone em SVG (path) ‚Äî √© est√°vel em qualquer servidor.

Pexels em alta de verdade
Voc√™ usa photo.src.large; para banner 1920√ó1080 √© melhor large2x ou original:

return photo.src.large2x || photo.src.original || photo.src.large;


Garantir pasta de sa√≠da
Antes de toFile(outputPath), crie a pasta:

import * as path from "path";
import * as fs from "fs";
fs.mkdirSync(path.dirname(outputPath), { recursive: true });

Ajustes de qualidade (opcional, mas melhora visual)

Quebra de linha do t√≠tulo: seu truncamento a 20 chars corta nomes. Fa√ßa wrap por palavras e m√∫ltiplas <tspan> para 2 linhas.

Posicionamento da imagem do produto: em 1920√ó1080, left: bannerWidth - 850 pode cortar foto alta; calcule dinamicamente com metadata() do Sharp e centralize verticalmente.

Contraste: adicione uma faixa transl√∫cida atr√°s do texto (j√° tem algo no ‚Äútext-only‚Äù; leve a ideia para o banner com produto).

Teste ‚Äúfim-a-fim‚Äù esperado (sem PEXELS_API_KEY)

Deve logar:
‚ö†Ô∏è PEXELS_API_KEY n√£o configurado ‚Ä¶ ‚Üí em seguida ‚ú® Gerando banner profissional sem APIs externas‚Ä¶ ‚Üí sem chamar IA.
Se cair no ‚Äúü§ñ Usando prompt customizado‚Ä¶‚Äù, a rota/condi√ß√£o ainda est√° trazendo customPrompt com valor (ex.: "") ou rodando o c√≥digo antigo.

Se voc√™ quiser, me mande:

o handler da rota que chama generatePromotionalArt e

a URL que o backend usa para o Vertex,
que eu te devolvo um patch curto garantindo que (1) a fun√ß√£o certa seja chamada e (2) a chamada ao Vertex esteja no formato GenerateContent com a SA correta.