import { useRef, useEffect, useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Clock, Sparkles, CheckCircle, Download, Share2 } from 'lucide-react';
import { Product } from '@shared/schema';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import jsPDF from 'jspdf';

interface ScratchCardProps {
  product: Product;
  currency: string;
  onRevealed?: (product: Product) => void;
}

// Formatar pre√ßo
const formatPriceWithCurrency = (price: string, currency: string): string => {
  const formattedPrice = parseFloat(price).toFixed(2).replace('.', ',');
  return `${currency}$ ${formattedPrice}`;
};

export default function ScratchCard({ product, currency, onRevealed }: ScratchCardProps) {
  // Estados
  const [isRevealed, setIsRevealed] = useState(false);
  const [scratchProgress, setScratchProgress] = useState(0);
  const [timeLeft, setTimeLeft] = useState<number | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [isFading, setIsFading] = useState(false);
  const [coupon, setCoupon] = useState<any>(null);
  const [couponGenerated, setCouponGenerated] = useState(false);
  const [showCouponModal, setShowCouponModal] = useState(false);

  // Refs
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const scratchedAreas = useRef<Array<{ x: number; y: number; radius: number }>>([]);
  const { toast } = useToast();

  // √Åudio
  const audioCtxRef = useRef<AudioContext | null>(null);
  const lastSoundTime = useRef<number>(0);
  const SOUND_COOLDOWN = 120; // ms

  // Progresso / desenho
  const rafId = useRef<number | null>(null);
  const needsProgressCalc = useRef<boolean>(false);
  const lastPoint = useRef<{ x: number; y: number } | null>(null);

  const queryClient = useQueryClient();

  // ---------- NOVO: status do backend ----------
  const { data: scratchStatus, isLoading: loadingStatus } = useQuery({
    queryKey: ['scratch-status', product.id],
    queryFn: async () => {
      const r = await fetch(`/api/products/${product.id}/scratch-status`, { credentials: 'include' });
      if (!r.ok) throw new Error('Falha ao carregar status da raspadinha');
      return r.json() as Promise<{
        redeemed: boolean;
        expiresAt?: string;
        coupon?: any;
      }>;
    },
    staleTime: 60_000,
  });

  useEffect(() => {
    if (!scratchStatus) return;
    const redeemed = !!scratchStatus.redeemed;
    setIsRevealed(redeemed);

    if (scratchStatus.expiresAt) {
      const expirationTime = new Date(scratchStatus.expiresAt).getTime();
      const now = Date.now();
      setTimeLeft(Math.max(0, Math.floor((expirationTime - now) / 1000)));
    } else {
      setTimeLeft(null);
    }

    if (scratchStatus.coupon) {
      setCoupon(scratchStatus.coupon);
      setCouponGenerated(true);
    } else {
      setCoupon(null);
      setCouponGenerated(false);
    }
  }, [scratchStatus]);

  // ---------- Raspar (marca no servidor) ----------
  const scratchMutation = useMutation({
    mutationFn: async (productId: string) => {
      const response = await fetch(`/api/products/${productId}/scratch`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
      });
      if (!response.ok) {
        const errorText = await response.text().catch(() => '');
        throw new Error(`${response.status}: ${errorText || 'Falha ao raspar'}`);
      }
      return response.json();
    },
    onSuccess: (data: any) => {
      if (data?.expiresAt) {
        const expirationTime = new Date(data.expiresAt).getTime();
        const now = Date.now();
        setTimeLeft(Math.max(0, Math.floor((expirationTime - now) / 1000)));
      }
      setIsRevealed(true);
      queryClient.invalidateQueries({ queryKey: ['scratch-status', product.id] });
      onRevealed?.(product);
    },
    onError: (error: any) => {
      setIsFading(false);
      toast({
        title: 'N√£o foi poss√≠vel concluir o resgate',
        description: String(error?.message || 'Tente novamente.'),
        variant: 'destructive',
      });
    },
  });

  // ---------- Cupom ----------
  const generateCouponMutation = useMutation({
    mutationFn: async (productId: string) => {
      const response = await fetch(`/api/products/${productId}/generate-coupon`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
      });
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`${response.status}: ${error}`);
      }
      return await response.json();
    },
    onSuccess: (data: any) => {
      if (data?.success && data?.coupon) {
        setCoupon(data.coupon);
        setCouponGenerated(true);
        setShowModal(false);
        setShowCouponModal(true);

        toast({
          title: 'üéâ Cupom gerado!',
          description: 'Veja os detalhes do seu cupom!',
          duration: 3000,
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: 'Erro ao gerar cupom',
        description: `Erro: ${error.message}`,
        variant: 'destructive',
      });
    }
  });

  // ---------- Timer ----------
  useEffect(() => {
    if (timeLeft === null || timeLeft <= 0) return;
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev === null || prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(timer);
  }, [timeLeft]);

  // ---------- INIT canvas (n√£o inicializa se j√° revelado) ----------
  useEffect(() => {
    if (isRevealed) return;
    if (!canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Reset m√≠nimos (sem setIsRevealed(false)!)
    scratchedAreas.current = [];
    setScratchProgress(0);
    setIsFading(false);
    lastPoint.current = null;
    needsProgressCalc.current = false;

    const rect = canvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;

    canvas.width = Math.round(rect.width * dpr);
    canvas.height = Math.round(rect.height * dpr);
    ctx.scale(dpr, dpr);

    // Camada metalizada
    const gradient = ctx.createLinearGradient(0, 0, rect.width, rect.height);
    gradient.addColorStop(0, '#c0c0c0');
    gradient.addColorStop(0.2, '#e8e8e8');
    gradient.addColorStop(0.4, '#b8b8b8');
    gradient.addColorStop(0.6, '#d8d8d8');
    gradient.addColorStop(0.8, '#a8a8a8');
    gradient.addColorStop(1, '#c8c8c8');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, rect.width, rect.height);

    for (let i = 0; i < 15; i++) {
      const lineY = (rect.height / 15) * i;
      ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 + Math.random() * 0.15})`;
      ctx.lineWidth = 0.8;
      ctx.beginPath();
      ctx.moveTo(0, lineY);
      ctx.lineTo(rect.width, lineY + Math.random() * 4 - 2);
      ctx.stroke();
    }

    // Texto
    ctx.fillStyle = 'rgba(80, 80, 80, 0.9)';
    ctx.font = 'bold 16px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('üëÜ RASPE AQUI', rect.width / 2, rect.height / 2 - 10);
    ctx.font = '12px Arial, sans-serif';
    ctx.fillStyle = 'rgba(100, 100, 100, 0.8)';
    ctx.fillText('Descubra sua oferta!', rect.width / 2, rect.height / 2 + 15);

    // Modo apagar
    ctx.globalCompositeOperation = 'destination-out';
  }, [product.id, isRevealed]);

  // ---------- Som ----------
  const playScratchSound = () => {
    const now = Date.now();
    if (now - lastSoundTime.current < SOUND_COOLDOWN) return;
    try {
      if (!audioCtxRef.current) {
        audioCtxRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();
      }
      const audioCtx = audioCtxRef.current;
      if (audioCtx.state === 'suspended') audioCtx.resume();

      const oscillator = audioCtx.createOscillator();
      const gainNode = audioCtx.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(audioCtx.destination);
      oscillator.frequency.setValueAtTime(100 + Math.random() * 50, audioCtx.currentTime);
      oscillator.type = 'sawtooth';
      gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
      gainNode.gain.linearRampToValueAtTime(0.015, audioCtx.currentTime + 0.02);
      gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.08);
      oscillator.start(audioCtx.currentTime);
      oscillator.stop(audioCtx.currentTime + 0.08);
      lastSoundTime.current = now;
    } catch { /* som opcional */ }
  };

  // ---------- Progresso ----------
  const calculateProgressOptimized = () => {
    if (!canvasRef.current) return;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    try {
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;

      let transparentPixels = 0;
      let totalPixels = 0;

      for (let i = 0; i < data.length; i += 64) {
        const alpha = data[i + 3];
        totalPixels++;
        if (alpha < 128) transparentPixels++;
      }

      const progress = totalPixels > 0 ? transparentPixels / totalPixels : 0;
      setScratchProgress(progress);

      if (progress > 0.65 && !isRevealed) {
        setIsFading(true);
        setTimeout(() => {
          // Deixa o servidor marcar o resgate; onSuccess ajusta estados
          scratchMutation.mutate(product.id);
        }, 200);
      }
    } catch (error) {
      console.warn('Erro ao calcular progresso:', error);
    }

    needsProgressCalc.current = false;
    rafId.current = null;
  };

  const drawScratchCircle = (x: number, y: number, pressure: number = 1) => {
    if (!canvasRef.current) return;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const rect = canvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;

    const canvasX = (x - rect.left) * dpr;
    const canvasY = (y - rect.top) * dpr;

    const baseRadius = 24;
    const radius = baseRadius * (0.7 + pressure * 0.6);

    ctx.beginPath();
    ctx.arc(canvasX, canvasY, radius, 0, 2 * Math.PI);
    ctx.fill();

    if (!needsProgressCalc.current) {
      needsProgressCalc.current = true;
      if (rafId.current) cancelAnimationFrame(rafId.current);
      rafId.current = requestAnimationFrame(calculateProgressOptimized);
    }
  };

  const drawScratchLine = (x1: number, y1: number, x2: number, y2: number, pressure: number = 1) => {
    if (!canvasRef.current) return;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const rect = canvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;

    const canvasX1 = (x1 - rect.left) * dpr;
    const canvasY1 = (y1 - rect.top) * dpr;
    const canvasX2 = (x2 - rect.left) * dpr;
    const canvasY2 = (y2 - rect.top) * dpr;

    const baseWidth = 48;
    const lineWidth = baseWidth * (0.7 + pressure * 0.6);

    ctx.lineWidth = lineWidth;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    ctx.beginPath();
    ctx.moveTo(canvasX1, canvasY1);
    ctx.lineTo(canvasX2, canvasY2);
    ctx.stroke();
  };

  const blockIfRevealed = () => isRevealed || loadingStatus;

  // Mouse
  const handleMouseDown = (e: React.MouseEvent) => {
    if (blockIfRevealed()) return;
    e.preventDefault();
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;
    const x = e.clientX;
    const y = e.clientY;
    lastPoint.current = { x, y };
    drawScratchCircle(x, y, 1);
    playScratchSound();
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (blockIfRevealed() || !lastPoint.current) return;
    e.preventDefault();
    const x = e.clientX;
    const y = e.clientY;
    drawScratchLine(lastPoint.current.x, lastPoint.current.y, x, y, 1);
    drawScratchCircle(x, y, 1);
    lastPoint.current = { x, y };
    playScratchSound();
  };

  const handleMouseUp = () => {
    lastPoint.current = null;
  };

  // Touch
  const handleTouchStart = (e: React.TouchEvent) => {
    if (blockIfRevealed()) return;
    e.preventDefault();
    if (e.touches.length === 0) return;
    const touch = e.touches[0];
    const x = touch.clientX;
    const y = touch.clientY;
    const pressure = (touch as any).force || 1;
    lastPoint.current = { x, y };
    drawScratchCircle(x, y, pressure);
    playScratchSound();
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (blockIfRevealed() || !lastPoint.current || e.touches.length === 0) return;
    e.preventDefault();
    const touch = e.touches[0];
    const x = touch.clientX;
    const y = touch.clientY;
    const pressure = (touch as any).force || 1;
    drawScratchLine(lastPoint.current.x, lastPoint.current.y, x, y, pressure);
    drawScratchCircle(x, y, pressure);
    lastPoint.current = { x, y };
    playScratchSound();
  };

  const handleTouchEnd = () => {
    lastPoint.current = null;
  };

  // Tempo restante
  const formatTimeLeft = (seconds: number) => {
    if (seconds < 60) return `${seconds}s`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // PDF
  const downloadPDF = () => {
    if (!coupon) return;
    const doc = new jsPDF();
    doc.setFontSize(20);
    doc.text('üéâ CUPOM DE DESCONTO', 20, 30);
    doc.setFontSize(14);
    doc.text(`Produto: ${product.name}`, 20, 50);
    doc.setFontSize(16);
    doc.text(`üî• ${coupon.discountPercentage}% DE DESCONTO!`, 20, 70);
    doc.setFontSize(12);
    doc.text(`De: ${formatPriceWithCurrency(coupon.originalPrice, currency)}`, 20, 90);
    doc.text(`Por: ${formatPriceWithCurrency(coupon.discountPrice, currency)}`, 20, 105);
    doc.setFontSize(14);
    doc.text(`C√≥digo: ${coupon.couponCode}`, 20, 130);
    const expirationDate = new Date(coupon.expiresAt).toLocaleString('pt-BR');
    doc.text(`V√°lido at√©: ${expirationDate}`, 20, 150);
    if (coupon.qrCode) doc.addImage(coupon.qrCode, 'PNG', 120, 80, 60, 60);
    doc.setFontSize(10);
    doc.text('Apresente este cupom na loja para resgatar o desconto', 20, 200);
    doc.save(`cupom-${coupon.couponCode}.pdf`);
  };

  // WhatsApp
  const shareOnWhatsApp = () => {
    if (!coupon) return;
    const originalPrice = parseFloat(product.price || '0');
    const discountPrice = parseFloat(product.scratchPrice || '0');
    const discountPercentage = originalPrice > 0 ? Math.round(((originalPrice - discountPrice) / originalPrice) * 100) : 0;
    const message =
      `üéâ *CUPOM DE DESCONTO*\n\n` +
      `üì± *${product.name}*\n` +
      `üè™ *CellShop Importados Paraguay*\n\n` +
      `üî• *${discountPercentage}% DE DESCONTO!*\n\n` +
      `üí∞ De: ${formatPriceWithCurrency(product.price || '0', currency)}\n` +
      `üí∏ Por: ${formatPriceWithCurrency(product.scratchPrice || '0', currency)}\n\n` +
      `üé´ *C√≥digo:* ${coupon.couponCode}\n` +
      `‚è∞ *V√°lido at√©:* ${new Date(coupon.expiresAt).toLocaleString('pt-BR')}\n\n` +
      `üìç Apresente este cupom na loja para resgatar!`;
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, '_blank');
  };

  // ------------------ Modal de produto detalhado (EXATAMENTE COMO O SEU) ------------------
  const ProductModal = () => {
    if (!showModal) return null;

    // Calcular porcentagem de desconto
    const originalPrice = parseFloat(product.price || '0');
    const discountPrice = parseFloat(product.scratchPrice || '0');
    const discountPercentage = originalPrice > 0 ? Math.round(((originalPrice - discountPrice) / originalPrice) * 100) : 0;

    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6">
            {/* Header do modal */}
            <div className="flex justify-between items-start mb-4">
              <h2 className="text-xl font-bold text-gray-800">üéâ Oferta Revelada!</h2>
              <button
                onClick={() => setShowModal(false)}
                className="text-gray-500 hover:text-gray-700 text-2xl leading-none"
              >
                √ó
              </button>
            </div>

            {/* Imagem do produto */}
            {product.imageUrl && (
              <img
                src={product.imageUrl}
                alt={product.name}
                className="w-full h-64 object-contain rounded-lg mb-4 bg-gray-50"
              />
            )}

            {/* Nome do produto */}
            <h3 className="text-lg font-bold text-gray-800 mb-2">{product.name}</h3>

            {/* Descri√ß√£o */}
            {product.description && (
              <p className="text-gray-600 mb-4">{product.description}</p>
            )}

            {/* Pre√ßos destacados */}
            <div className="bg-gradient-to-r from-red-50 to-orange-50 p-4 rounded-lg mb-4">
              <div className="text-center space-y-2">
                <div className="text-sm text-gray-500 line-through">
                  Pre√ßo normal: {formatPriceWithCurrency(product.price || '0', currency)}
                </div>
                <div className="text-3xl font-bold text-red-600 flex items-center justify-center gap-2">
                  <Sparkles className="w-6 h-6" />
                  {formatPriceWithCurrency(product.scratchPrice || '0', currency)}
                </div>

                {/* Porcentagem de desconto */}
                <div className="bg-green-100 border border-green-300 rounded-lg p-3 my-3">
                  <div className="text-2xl font-bold text-green-700 flex items-center justify-center gap-2">
                    üî• {discountPercentage}% DE DESCONTO!
                  </div>
                  <div className="text-sm text-green-600 mt-1">
                    Voc√™ economiza: {formatPriceWithCurrency((originalPrice - discountPrice).toString(), currency)}
                  </div>
                </div>

                {/* Timer de expira√ß√£o */}
                {timeLeft !== null && timeLeft > 0 && (
                  <div className="bg-orange-100 text-orange-800 px-3 py-2 rounded-full inline-flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    <span className="font-semibold">V√°lido por: {formatTimeLeft(timeLeft)}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Se√ß√£o de Cupom - Mostrar apenas se cupom foi gerado */}
            {couponGenerated && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                <div className="text-center">
                  <div className="flex items-center justify-center gap-2 mb-3">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <h4 className="font-bold text-green-800">Cupom Gerado!</h4>
                  </div>

                  {/* QR Code */}
                  {coupon?.qrCode && (
                    <div className="mb-3">
                      <img
                        src={coupon.qrCode}
                        alt="QR Code do cupom"
                        className="mx-auto w-32 h-32 border border-gray-300 rounded"
                      />
                    </div>
                  )}

                  {/* C√≥digo do cupom */}
                  <div className="bg-white border border-dashed border-gray-400 rounded p-2 mb-3">
                    <p className="text-xs text-gray-600">C√≥digo do cupom:</p>
                    <p className="font-mono font-bold text-lg">{coupon?.couponCode}</p>
                  </div>

                  {/* Bot√µes de a√ß√£o do cupom */}
                  <div className="flex gap-2">
                    <Button
                      onClick={downloadPDF}
                      variant="outline"
                      size="sm"
                      className="flex-1"
                    >
                      <Download className="w-4 h-4 mr-1" />
                      PDF
                    </Button>
                    <Button
                      onClick={shareOnWhatsApp}
                      variant="outline"
                      size="sm"
                      className="flex-1 bg-green-50 border-green-300 text-green-700 hover:bg-green-100"
                    >
                      <Share2 className="w-4 h-4 mr-1" />
                      WhatsApp
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Bot√µes de a√ß√£o */}
            <div className="flex gap-3">
              <button
                onClick={() => {
                  if (!couponGenerated) {
                    generateCouponMutation.mutate(product.id);
                  }
                }}
                className="flex-1 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-bold py-3 px-4 rounded-lg transition-all"
                disabled={generateCouponMutation.isPending}
              >
                {generateCouponMutation.isPending
                  ? 'Gerando cupom...'
                  : couponGenerated
                  ? <>‚úÖ Cupom Gerado!</>
                  : <>üé´ Aproveitar Oferta</>
                }
              </button>
              <button
                onClick={() => setShowModal(false)}
                className="px-4 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-all"
              >
                Fechar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // ------------------ RENDER ------------------

  // Carregando status
  if (loadingStatus) {
    return (
      <div className="relative bg-gradient-to-br from-yellow-100 to-orange-100 border-2 border-yellow-400 min-h-[200px] sm:min-h-[220px] rounded-md animate-pulse" />
    );
  }

  // Revelado (j√° resgatado)
  if (isRevealed) {
    const originalPrice = parseFloat(product.price || '0');
    const discountPrice = parseFloat(product.scratchPrice || '0');
    const discountPercentage = originalPrice > 0 ? Math.round(((originalPrice - discountPrice) / originalPrice) * 100) : 0;

    return (
      <>
        <div
          className="relative bg-gradient-to-br from-yellow-50 to-orange-50 border-4 border-yellow-400 overflow-hidden group text-center flex flex-col min-h-[200px] sm:min-h-[220px] cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-[1.02]"
          onClick={() => setShowModal(true)}
          data-testid={`card-product-revealed-${product.id}`}
        >
          {/* Badge ‚ÄúResgatado‚Äù */}
          <div className="absolute top-2 left-2 z-10">
            <Badge variant="secondary" className="bg-green-100 text-green-800 text-xs">
              ‚úÖ Resgatado
            </Badge>
          </div>

          {/* Timer */}
          {timeLeft !== null && timeLeft > 0 && (
            <div className="absolute top-2 right-2 z-10">
              <Badge variant="secondary" className="bg-orange-100 text-orange-800 flex items-center gap-1 text-xs">
                <Clock className="w-3 h-3" />
                {formatTimeLeft(timeLeft)}
              </Badge>
            </div>
          )}

          <div className="h-full flex flex-col p-3">
            {/* Imagem */}
            <div className="relative mb-2">
              {product.imageUrl ? (
                <img
                  src={product.imageUrl}
                  alt={product.name}
                  className="w-full h-24 sm:h-28 object-contain rounded bg-white/50"
                />
              ) : (
                <div className="w-full h-24 sm:h-28 bg-gray-100 rounded flex items-center justify-center">
                  <span className="text-gray-400 text-2xl">üì±</span>
                </div>
              )}

              {/* Badge de desconto */}
              <div className="absolute top-1 right-1">
                <Badge className="bg-red-500 text-white text-xs font-bold animate-pulse">
                  -{discountPercentage}%
                </Badge>
              </div>
            </div>

            {/* Nome */}
            <h3 className="text-sm font-bold text-gray-800 mb-2 line-clamp-2 flex-1">
              {product.name}
            </h3>

            {/* Pre√ßos */}
            <div className="mt-auto">
              <div className="text-xs text-gray-500 line-through mb-1">
                {formatPriceWithCurrency(product.price || '0', currency)}
              </div>
              <div className="text-lg font-bold text-red-600 flex items-center justify-center gap-1">
                <Sparkles className="w-4 h-4" />
                {formatPriceWithCurrency(product.scratchPrice || '0', currency)}
              </div>
            </div>
          </div>

          <div className="w-full bg-blue-500 text-white py-2 px-3 text-xs font-medium">
            üëÜ Toque para ver seu cupom
          </div>
        </div>

        {/* Modal de produto detalhado */}
        <ProductModal />

        {/* Modal do Cupom */}
        {showCouponModal && coupon && (
          <Dialog open={showCouponModal} onOpenChange={setShowCouponModal}>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle className="text-2xl font-bold text-center">üé´ Seu Cupom de Desconto</DialogTitle>
              </DialogHeader>

              <div className="space-y-6">
                {/* Produto */}
                <div className="text-center">
                  {product.imageUrl && (
                    <img
                      src={product.imageUrl}
                      alt={product.name}
                      className="w-32 h-32 object-cover rounded-lg mx-auto mb-4 border-4 border-green-200"
                    />
                  )}
                  <h3 className="text-xl font-bold text-gray-800 mb-2">{product.name}</h3>
                </div>

                {/* Desconto */}
                <div className="text-center bg-gradient-to-r from-red-50 to-orange-50 p-6 rounded-lg">
                  <div className="text-4xl font-bold text-red-600 mb-2">
                    üî• {coupon.discountPercentage}% OFF
                  </div>
                  <div className="text-2xl font-bold text-green-600 mb-2">
                    Por apenas: {formatPriceWithCurrency(coupon.discountPrice, currency)}
                  </div>
                  <div className="text-lg text-gray-500 line-through">
                    De: {formatPriceWithCurrency(coupon.originalPrice, currency)}
                  </div>
                </div>

                {/* QR Code e C√≥digo */}
                <div className="text-center bg-white border-2 border-dashed border-gray-300 p-6 rounded-lg">
                  {coupon.qrCode && (
                    <div className="mb-4">
                      <img
                        src={coupon.qrCode}
                        alt="QR Code do cupom"
                        className="w-48 h-48 mx-auto border border-gray-200 rounded"
                      />
                    </div>
                  )}

                  <div className="bg-gray-100 rounded-lg p-4">
                    <p className="text-sm text-gray-600 mb-1">C√≥digo do cupom:</p>
                    <p className="text-2xl font-mono font-bold text-gray-800">{coupon.couponCode}</p>
                  </div>
                </div>

                {/* A√ß√µes */}
                <div className="flex gap-3">
                  <Button onClick={downloadPDF} variant="outline" className="flex-1">
                    <Download className="w-4 h-4 mr-2" />
                    Baixar PDF
                  </Button>
                  <Button onClick={shareOnWhatsApp} className="flex-1 bg-green-600 hover:bg-green-700">
                    <Share2 className="w-4 h-4 mr-2" />
                    Compartilhar
                  </Button>
                </div>

                {/* Instru√ß√µes */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <h4 className="font-semibold text-blue-800 mb-2">üìç Como usar este cupom:</h4>
                  <ul className="text-sm text-blue-700 space-y-1">
                    <li>‚Ä¢ Apresente este cupom na loja</li>
                    <li>‚Ä¢ Mostre o QR Code ou o c√≥digo</li>
                    <li>‚Ä¢ Aproveite seu desconto!</li>
                  </ul>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}
      </>
    );
  }

  // N√£o revelado (raspadinha)
  return (
    <>
      <div className="relative isolate z-10 bg-gradient-to-br from-yellow-100 to-orange-100 border-2 border-yellow-400 overflow-hidden group text-center flex flex-col min-h-[200px] sm:min-h-[220px] cursor-pointer select-none">
        <div className="p-0 relative h-full w-full overflow-hidden">
          {/* Badge indicativo */}
          <div className="absolute top-2 right-2 z-20">
            <Badge className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white animate-bounce text-xs">
              <Sparkles className="w-3 h-3 mr-1" />
              RASPE!
            </Badge>
          </div>

          {/* Produto por tr√°s */}
          <div className="absolute inset-0 p-3 flex flex-col justify-center items-center bg-white">
            {/* Imagem */}
            {product.imageUrl ? (
              <img
                src={product.imageUrl}
                alt={product.name}
                className="w-16 h-16 object-contain mb-2 opacity-30"
              />
            ) : (
              <div className="w-16 h-16 bg-gray-100 rounded flex items-center justify-center mb-2 opacity-30">
                <span className="text-gray-400 text-xl">üì±</span>
              </div>
            )}

            {/* Nome */}
            <div className="text-sm font-bold text-gray-800 opacity-40 mb-1 text-center line-clamp-2">
              {product.name}
            </div>

            {/* Pre√ßo de oferta */}
            <div className="text-lg font-bold text-red-600 opacity-40">
              {formatPriceWithCurrency(product.scratchPrice || '0', currency)}
            </div>
          </div>

          {/* Canvas de scratch */}
          <canvas
            ref={canvasRef}
            className={`absolute inset-0 w-full h-full cursor-pointer transition-all duration-200 ease-out ${
              isFading ? 'opacity-0 scale-105' : 'opacity-100 scale-100'
            }`}
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
            onMouseLeave={handleMouseUp}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
            style={{ touchAction: 'none', display: 'block' }}
          />

          {/* Efeito gradual do desconto */}
          {scratchProgress > 0.3 && !isRevealed && (
            <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 z-0 pointer-events-none">
              <div
                className={`bg-red-500 text-white text-xs px-2 py-1 rounded-full font-bold transition-all duration-700 ${
                  scratchProgress > 0.6 ? 'animate-pulse opacity-100 scale-100' : 'opacity-70 scale-90'
                }`}
              >
                {scratchProgress > 0.7 ? (
                  `-${currency}${(parseFloat(product.price!) - parseFloat(product.scratchPrice!)).toFixed(2)}`
                ) : scratchProgress > 0.5 ? '????' : '??'}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Pode manter o ProductModal montado; ele s√≥ abre quando showModal = true */}
      <ProductModal />
    </>
  );
}
