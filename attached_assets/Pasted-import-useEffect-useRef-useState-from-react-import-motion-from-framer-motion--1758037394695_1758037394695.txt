import { useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";

/**
 * Carrossel de Banners – MODELO BUSCAPÉ (3 visíveis com imagens)
 * - Proporção 70% | 15% | 15%
 * - Deslizamento contínuo (sem rebote)
 * - Setas aparecem sobre o banner central no hover
 * - Imagem sem fundo, preenchendo toda a altura (object-cover)
 */

const DEFAULT_ITEMS = [
  { id: "1", image: "https://s.zst.com.br/prod/brickz/Home_MKTP_Buscape_Desk_728847a1ae.webp" },
  { id: "2", image: "https://s.zst.com.br/prod/brickz/Hero_Buscape_Aniversario_Casas_Bahia_Desk_a3182b1763.webp" },
  { id: "3", image: "https://s.zst.com.br/prod/brickz/Hero_Buscape_Amazon_50_off_Desk_7fbd2ae30c.webp" },
];

export default function BannerCarousel({ items = DEFAULT_ITEMS, interval = 5000, autoplay = true, gapPx = 24 }) {
  const n = items.length;
  const [center, setCenter] = useState(0);
  const [dir, setDir] = useState(1); // 1 = direita->centro (vai para a esquerda); -1 = esquerda->centro
  const [isAnimating, setIsAnimating] = useState(false);
  const [isHover, setIsHover] = useState(false);
  const [touchStartX, setTouchStartX] = useState<number | null>(null);
  const [snap, setSnap] = useState(false); // transição instantânea para resetar trilho após animar

  const i = (k: number) => (k + n) % n;

  // autoplay
  useEffect(() => {
    if (!autoplay || isHover) return;
    const id = setInterval(() => next(), interval);
    return () => clearInterval(id);
  }, [center, autoplay, isHover, interval]);

  // teclas ← →
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === "ArrowRight") next();
      if (e.key === "ArrowLeft") prev();
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [center]);

  const next = () => {
    if (isAnimating) return;
    setDir(1);
    setIsAnimating(true);
  };
  const prev = () => {
    if (isAnimating) return;
    setDir(-1);
    setIsAnimating(true);
  };

  // Touch
  const onTouchStart = (e: React.TouchEvent) => setTouchStartX(e.touches[0].clientX);
  const onTouchMove = (e: React.TouchEvent) => {
    if (touchStartX == null) return;
    const dx = e.touches[0].clientX - touchStartX;
    if (Math.abs(dx) > 50) {
      dx < 0 ? next() : prev();
      setTouchStartX(null);
    }
  };

  // Índices auxiliares
  const prevLeft = i(center - 2);
  const left = i(center - 1);
  const right = i(center + 1);
  const nextRight = i(center + 2);

  // 4 cartões: 3 visíveis + 1 fora da viewport para continuidade
  const slides = dir === 1
    ? [
        { idx: left, start: "15%", end: "15%" },
        { idx: center, start: "70%", end: "15%" },
        { idx: right, start: "15%", end: "70%" },
        { idx: nextRight, start: "15%", end: "15%" },
      ]
    : [
        { idx: prevLeft, start: "15%", end: "15%" },
        { idx: left, start: "15%", end: "70%" },
        { idx: center, start: "70%", end: "15%" },
        { idx: right, start: "15%", end: "15%" },
      ];

  const duration = 0.6;

  return (
    <div
      className="relative w-full mx-auto select-none"
      onMouseEnter={() => setIsHover(true)}
      onMouseLeave={() => setIsHover(false)}
      onTouchStart={onTouchStart}
      onTouchMove={onTouchMove}
      aria-roledescription="carousel"
    >
      {/* Altura responsiva unificada para os três banners */}
      <motion.div className="relative overflow-hidden" style={{ height: "clamp(160px, 28vw, 480px)" }}>
        <motion.div
          className="relative flex items-stretch"
          style={{ gap: `${gapPx}px`, willChange: "transform" }}
          initial={false}
          animate={{ x: isAnimating ? (dir === 1 ? "-15%" : "15%") : "0%" }}
          transition={snap ? { duration: 0 } : { duration, ease: "easeInOut" }}
          onAnimationComplete={() => {
            if (isAnimating) {
              setCenter((c) => i(c + dir));
              setIsAnimating(false);
              setSnap(true);
              requestAnimationFrame(() => setSnap(false));
            }
          }}
        >
          {slides.map((s, k) => (
            <Slide
              key={`${s.idx}-${k}`}
              item={items[s.idx]}
              startBasis={s.start}
              endBasis={s.end}
              animateWidth={isAnimating}
              duration={duration}
              onPrev={prev}
              onNext={next}
            />
          ))}
        </motion.div>
      </motion.div>

      {/* Indicadores */}
      <div className="absolute bottom-3 left-1/2 -translate-x-1/2 flex items-center gap-2 z-30">
        {items.map((_, iDot) => (
          <button
            key={iDot}
            aria-label={`Ir para o banner ${iDot + 1}`}
            onClick={() => !isAnimating && setCenter(iDot)}
            className={`h-2.5 w-2.5 rounded-full transition-all ${
              center === iDot ? "scale-125 bg-white" : "bg-white/50 hover:bg-white/70"
            }`}
          />
        ))}
      </div>
    </div>
  );
}

// Slide: controla a largura (flex-basis) de cada cartão e as setas quando está no centro visual
function Slide({
  item,
  startBasis,
  endBasis,
  animateWidth,
  duration,
  onPrev,
  onNext,
}: {
  item: { id: string; image: string };
  startBasis: string;
  endBasis: string;
  animateWidth: boolean;
  duration: number;
  onPrev: () => void;
  onNext: () => void;
}) {
  const isCenterVisual = animateWidth ? endBasis === "70%" : startBasis === "70%";

  return (
    <motion.div
      initial={false}
      animate={{ flexBasis: animateWidth ? endBasis : startBasis }}
      transition={{ duration, ease: "easeInOut" }}
      className="shrink-0 group"
    >
      <div className="relative w-full h-full rounded-xl overflow-hidden">
        <img
          src={item?.image}
          alt="banner"
          className="w-full h-full object-cover block"
          loading="lazy"
          decoding="async"
          draggable="false"
        />

        {isCenterVisual && (
          <div className="pointer-events-none absolute inset-0 flex items-center justify-between px-2 sm:px-3 md:px-4 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
            <button
              onClick={onPrev}
              aria-label="Anterior"
              className="pointer-events-auto rounded-full bg-black/45 hover:bg-black/65 text-white w-9 h-9 flex items-center justify-center"
            >
              ←
            </button>
            <button
              onClick={onNext}
              aria-label="Próximo"
              className="pointer-events-auto rounded-full bg-black/45 hover:bg-black/65 text-white w-9 h-9 flex items-center justify-center"
            >
              →
            </button>
          </div>
        )}
      </div>
    </motion.div>
  );
}
