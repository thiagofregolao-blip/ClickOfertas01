O que este projeto faz (resumo)

A barra É o chat (Click Assistant). Ao focar, abre um dropdown ancorado (não estica o header).

Conversa curta, leve e bem-humorada (no máx. 5 linhas).

Scroll para baixo (mensagem nova aparece embaixo e a box acompanha).

Top 3 Premium no dropdown; resto da busca aparece em cards abaixo do header.

“Combina com” (acessórios) abaixo dos resultados.

Cards clicáveis → /produto/:id (ajuste fácil).

Ranqueia Premium > similaridade > preço.

Evita loop de saudação (sessão por usuário, cache 1h).

RAG leve: a IA responde ancorada nos produtos retornados por /api/suggest.

SSE por POST (streaming) com OpenAI (use sua OPENAI_API_KEY nos Secrets do Replit).

Click Assistant — Zero Bala

Stack & versão: Node 18+ • Express 4 • Front vanilla (HTML + JS) • Tailwind via CDN

Árvore
click-assistant/
├─ package.json
├─ .replit
├─ replit.nix
├─ src/
│  ├─ server.js                 # Express + rotas de sessão, stream e sugestão
│  ├─ lib/
│  │  ├─ ranker.js             # ranking: premium > similaridade > preço
│  │  └─ answerComposer.js     # RAG leve + estilo bem-humorado e curto
│  └─ data/
│     └─ stores.json           # exemplo de base (lojas, premium, produtos)
└─ public/
   ├─ index.html               # barra = chat + dropdown ancorado
   ├─ app.js                   # UI/stream; scroll para baixo; fetch de sugestões
   └─ styles.css               # ajustes finos (opcional)

// package.json
{
  "name": "click-assistant",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "start": "node src/server.js",
    "dev": "node src/server.js"
  },
  "dependencies": {
    "express": "^4.19.2",
    "node-fetch": "^3.3.2"
  }
}

# .replit
run = "npm install && npm run start"

# replit.nix
{ pkgs }: {
  deps = [
    pkgs.nodejs-18_x
    pkgs.nodePackages.npm
  ];
}

// src/lib/ranker.js
/** Ranqueia produtos: premium > similaridade (title/category) > preço asc */
export function rankProducts(products, q = "") {
  const term = (q || "").toLowerCase().trim();
  const scored = products.map(p => {
    const title = (p.title || "").toLowerCase();
    const cat = (p.category || "").toLowerCase();
    const hit = title.includes(term) || cat.includes(term) ? 1 : 0;
    const starts = title.startsWith(term) ? 0.3 : 0;
    const premium = p.premium ? 1.0 : 0;
    const score = premium + hit + starts;
    return { ...p, score };
  });
  scored.sort((a, b) => {
    if (Number(b.premium) !== Number(a.premium)) return Number(b.premium) - Number(a.premium);
    if ((b.score || 0) !== (a.score || 0)) return (b.score || 0) - (a.score || 0);
    const pa = a.price?.USD ?? Number.POSITIVE_INFINITY;
    const pb = b.price?.USD ?? Number.POSITIVE_INFINITY;
    return pa - pb;
  });
  return scored;
}

// src/lib/answerComposer.js
import fetch from "node-fetch";

/** Busca produtos para fundamentar a resposta (RAG leve) */
export async function buildGrounding(origin, q) {
  const tryFetch = async (url) => {
    try { const r = await fetch(url); if (r.ok) return await r.json(); } catch {}
    return { products: [] };
  };
  const sug = (await tryFetch(`${origin}/api/suggest?q=${encodeURIComponent(q)}`)) ||
              (await tryFetch(`${origin}/suggest?q=${encodeURIComponent(q)}`));
  const products = (sug?.products || []).map(p => ({
    id: p.id, title: p.title, category: p.category || "",
    priceUSD: p.price?.USD ?? undefined, premium: !!p.premium
  }));
  const top3 = products.slice(0, 3);
  return { top3, all: products };
}

/** Monta prompts curtos com tom leve e objetivo */
export function composePrompts({ q, name, top3 }) {
  const FACTS = JSON.stringify(top3, null, 0);
  const SYSTEM = [
    "Você é o Click Pro Assistant para Ciudad del Este, Salto del Guairá e Pedro Juan (Paraguai).",
    "Seja objetivo, leve e bem-humorado (sem exagero).",
    "Responda em até 5 linhas. Use no máx. 3 bullets (“• item — detalhe curto”).",
    "Priorize sempre lojas Premium quando citar opções.",
    "Nunca invente preços/estoques: use só os FATOS enviados.",
    "Se a consulta for sobre algo sem dados na base, ofereça alternativas que existam na base."
  ].join("\n");

  const USER = [
    `Usuário: ${name}`,
    `Consulta: ${q}`,
    `FATOS (top recomendações): ${FACTS}`,
    "Faça uma abertura amigável usando o nome do usuário e encerre com 'Posso ajudar em algo mais?' se fizer sentido."
  ].join("\n");

  return { SYSTEM, USER };
}

// src/data/stores.json
[
  {
    "id": "loja-premium-1",
    "name": "TecnoStar CDE",
    "plan": "premium",
    "products": [
      { "id": "p-iphone-15-128", "title": "iPhone 15 128GB", "category": "Celulares", "priceUSD": 855 },
      { "id": "p-iphone-16-pro-max", "title": "iPhone 16 Pro Max", "category": "Celulares", "priceUSD": 774 }
    ]
  },
  {
    "id": "loja-normal-1",
    "name": "MegaEletron CDE",
    "plan": "standard",
    "products": [
      { "id": "p-iphone-16", "title": "iPhone 16 128GB", "category": "Celulares", "priceUSD": 921 },
      { "id": "p-iphone-15-pro-max", "title": "iPhone 15 Pro Max", "category": "Celulares", "priceUSD": 712 }
    ]
  },
  {
    "id": "loja-premium-2",
    "name": "TopMobile PJC",
    "plan": "premium",
    "products": [
      { "id": "p-capinha-iphone-15", "title": "Capinha iPhone 15 silicone", "category": "Acessórios", "priceUSD": 20 },
      { "id": "p-carregador-20w", "title": "Carregador USB-C 20W", "category": "Acessórios", "priceUSD": 35 }
    ]
  }
]

// src/server.js
import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import fetch from "node-fetch";
import { rankProducts } from "./lib/ranker.js";
import { buildGrounding, composePrompts } from "./lib/answerComposer.js";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json({ limit: "1mb" }));
app.use(express.static(path.join(__dirname, "..", "public")));

// ---- memória simples de sessão (evita loop de saudação)
const sessionCache = new Map(); // key => { id, ts }
const ONE_HOUR = 60 * 60 * 1000;

// ---- base mock (troque por seu DB depois)
import stores from "./data/stores.json" assert { type: "json" };

// ---------- SESSÃO
app.post("/api/assistant/sessions", (req, res) => {
  const key = req.headers["x-user-id"] || req.ip || "anon";
  const now = Date.now();
  const cached = sessionCache.get(key);
  if (cached && now - cached.ts < ONE_HOUR) {
    return res.json({ success: true, session: { id: cached.id } });
  }
  const id = "sess-" + Math.random().toString(36).slice(2, 10);
  sessionCache.set(key, { id, ts: now });

  const hour = new Date().getHours();
  const name = req.headers["x-user-name"] || "Cliente";
  const saud = `Olá, ${name}! Boa ${hour < 12 ? "manhã" : hour < 18 ? "tarde" : "noite"} 👋`;

  // sugestão inicial = trending
  const products = collectAllProducts()
    .map(p => ({ ...p, premium: p.premium }))
    .slice(0, 60);
  return res.json({ success: true, session: { id }, greeting: saud, suggest: { products } });
});

// ---------- STREAM (SSE via POST) — usa OpenAI
app.post("/api/assistant/stream", async (req, res) => {
  try {
    const { sessionId, message } = req.body || {};
    const name = req.headers["x-user-name"] || "Cliente";
    if (!message?.trim()) return res.status(400).json({ ok: false, error: "message required" });

    res.writeHead(200, {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      Connection: "keep-alive"
    });
    const write = (d) => res.write(`data: ${JSON.stringify(d)}\n\n`);

    // RAG leve com base dos produtos
    const origin = `${req.protocol}://${req.get("host")}`;
    const grounding = await buildGrounding(origin, message);
    const { SYSTEM, USER } = composePrompts({ q: message, name, top3: grounding.top3 });

    // Chamada OpenAI (precisa OPENAI_API_KEY no Replit Secrets)
    const apiKey = process.env.OPENAI_API_KEY;
    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: process.env.CHAT_MODEL || "gpt-4o-mini",
        temperature: 0.15,
        max_tokens: 220,
        frequency_penalty: 0.3,
        presence_penalty: 0.0,
        stream: true,
        messages: [
          { role: "system", content: SYSTEM },
          { role: "user", content: USER }
        ]
      })
    });

    if (!r.ok || !r.body) {
      write({ type: "chunk", text: "Não consegui responder agora, mas já posso mostrar ofertas. Me diz um modelo específico? 😊" });
      write({ type: "end" }); return res.end();
    }

    const reader = r.body.getReader();
    const decoder = new TextDecoder();
    let buffer = "";

    while (true) {
      const { value, done } = await reader.read();
      if (done) break;
      buffer += decoder.decode(value, { stream: true });
      const parts = buffer.split("\n");
      buffer = parts.pop() || "";
      for (const line of parts) {
        const l = line.trim();
        if (!l || !l.startsWith("data:")) continue;
        const json = l.slice(5).trim();
        if (json === "[DONE]") { write({ type: "end" }); return res.end(); }
        try {
          const obj = JSON.parse(json);
          const delta = obj?.choices?.[0]?.delta?.content;
          if (delta) write({ type: "chunk", text: delta });
        } catch {}
      }
    }
    write({ type: "end" });
    res.end();
  } catch (e) {
    console.error("stream error", e);
    res.write(`data: ${JSON.stringify({ type: "error", message: "stream error" })}\n\n`);
    res.end();
  }
});

// ---------- SUGESTÃO (busca/ranqueamento + Premium)
app.get(["/suggest", "/api/suggest"], (req, res) => {
  const q = String(req.query.q || "").toLowerCase().trim();
  const all = collectAllProducts();
  const filtered = !q
    ? all
    : all.filter(p =>
        (p.title || "").toLowerCase().includes(q) ||
        (p.category || "").toLowerCase().includes(q)
      );
  const ranked = rankProducts(filtered, q).slice(0, 120);
  res.json({ ok: true, products: ranked });
});

// ---------- helpers
function collectAllProducts() {
  const out = [];
  for (const s of stores) {
    const premium = s.plan === "premium";
    for (const p of s.products || []) {
      out.push({
        id: String(p.id),
        title: p.title || p.name,
        category: p.category || p.type || "",
        price: { USD: Number(p.priceUSD ?? p.price ?? 0) || undefined },
        storeId: s.id,
        premium
      });
    }
  }
  return out;
}

app.listen(PORT, () => {
  console.log(`Click Assistant rodando em http://localhost:${PORT}`);
});

<!-- public/index.html -->
<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Click Ofertas.PY — Click Assistant</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/styles.css">
</head>
<body class="bg-orange-500/90">
  <!-- HEADER (simples) -->
  <header class="sticky top-0 z-30 bg-orange-500/90 backdrop-blur border-b border-white/20">
    <div class="max-w-5xl mx-auto px-3 py-3">
      <div class="text-white font-bold text-xl mb-2">Click Ofertas.PY</div>
      <!-- A BARRA É O CHAT -->
      <div id="assistant-root"></div>
    </div>
  </header>

  <!-- CONTEÚDO: resultados e acessórios aparecem AQUI (fora do dropdown) -->
  <main class="max-w-5xl mx-auto px-3 pt-3 pb-24">
    <section id="results"></section>
    <section id="combo" class="mt-4"></section>
  </main>

  <script src="/app.js" type="module"></script>
</body>
</html>

/* public/styles.css */
/* Sombra suave do dropdown */
.assist-shadow { box-shadow: 0 20px 40px rgba(0,0,0,.18); }
/* Cards clicáveis */
.card:hover { transform: translateY(-2px); }
.card { transition: transform .15s ease; }

// public/app.js
// UI do Click Assistant (barra=chat; dropdown ancorado; scroll para BAIXO)
const uid = localStorage.getItem('uid') || (localStorage.setItem('uid','u-'+Math.random().toString(36).slice(2,8)), localStorage.getItem('uid'));
const userName = localStorage.getItem('userName') || 'Cliente';

const root = document.getElementById('assistant-root');
root.innerHTML = `
  <div class="relative">
    <!-- BARRA -->
    <form id="bar" class="flex items-center gap-2 rounded-2xl px-4 py-2 bg-white shadow border">
      <div class="w-7 h-7 rounded-full bg-gradient-to-br from-indigo-500 to-purple-500 text-white grid place-content-center text-xs">C</div>
      <input id="q" class="flex-1 outline-none text-base" placeholder="Converse com o Click (ex.: iPhone 15 em CDE)" />
      <button class="px-3 py-1.5 rounded-lg bg-black text-white hover:opacity-90" type="submit">Enviar</button>
    </form>

    <!-- DROPDOWN (chat + top3) -->
    <div id="dropdown" class="hidden absolute left-0 right-0 top-full mt-2 z-40">
      <div class="assist-shadow bg-white/90 backdrop-blur rounded-2xl border p-3">
        <div class="grid grid-cols-12 gap-4">
          <!-- Chat com scroll para BAIXO -->
          <div class="col-span-12 lg:col-span-9">
            <div class="text-xs text-gray-500 mb-1">Click Assistant</div>
            <div id="chatBox" class="rounded-xl bg-gray-50 border p-3 max-h-[220px] overflow-auto whitespace-pre-wrap"></div>
            <div id="loading" class="hidden text-xs text-gray-500 mt-2">Buscando ofertas…</div>
          </div>
          <!-- Recomendados (Top 3) -->
          <div class="col-span-12 lg:col-span-3">
            <div class="rounded-2xl border bg-white/90 p-3">
              <div class="text-sm font-semibold mb-2">Produtos Recomendados</div>
              <div id="top3" class="grid gap-3"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
`;

const elBar = document.getElementById('bar');
const elQ = document.getElementById('q');
const elDD = document.getElementById('dropdown');
const elChat = document.getElementById('chatBox');
const elLoad = document.getElementById('loading');
const elTop3 = document.getElementById('top3');
const elResults = document.getElementById('results');
const elCombo = document.getElementById('combo');

let sessionId = '';
let reader = null;

// cria sessão (saudação 1x) + sugestão inicial
(async () => {
  const r = await fetch('/api/assistant/sessions', {
    method: 'POST',
    headers: { 'x-user-id': uid, 'x-user-name': userName }
  });
  const d = await r.json();
  sessionId = d?.session?.id;
  if (d.greeting) appendAssistant(`${d.greeting}\n`);
  if (d.suggest?.products?.length) {
    renderTop3(d.suggest.products.slice(0,3));
    renderResults(d.suggest.products.slice(3));
  }
})();

elQ.addEventListener('focus', () => {
  elDD.classList.remove('hidden'); // abre dropdown
});

// submit = envia para stream e busca sugestões
elBar.addEventListener('submit', async (e) => {
  e.preventDefault();
  const message = (elQ.value || '').trim();
  if (!message) return;
  startStream(message);
  suggestAndRender(message);
});

// digitação = busca incremental
elQ.addEventListener('input', debounce((e) => {
  const t = e.target.value.trim();
  if (!t) { elTop3.innerHTML = ''; elResults.innerHTML = ''; elCombo.innerHTML=''; return; }
  suggestAndRender(t);
}, 220));

async function suggestAndRender(term){
  elLoad.classList.remove('hidden');
  try{
    let r = await fetch(`/api/suggest?q=${encodeURIComponent(term)}`);
    const d = await r.json();
    const prods = (d.products || []);
    renderTop3(prods.slice(0,3));
    renderResults(prods.slice(3));
    // acessórios simples pelo 1º item
    renderCombo(prods[0]);
  } finally {
    elLoad.classList.add('hidden');
  }
}

// STREAM — rola SEMPRE para BAIXO
async function startStream(message){
  // cancela stream anterior
  if (reader) { try{ await reader.cancel(); } catch{} reader = null; }
  // limpa texto corrente (mas mantém histórico anterior)
  // estilo: respostas curtas e leves já saem do backend

  const res = await fetch('/api/assistant/stream', {
    method: 'POST',
    headers: { 'Content-Type':'application/json', 'Accept':'text/event-stream', 'x-user-id': uid, 'x-user-name': userName },
    body: JSON.stringify({ sessionId, message })
  });
  if (!res.ok || !res.body) return;

  // adiciona "tipando" no final
  const msgEl = document.createElement('div');
  msgEl.className = "mb-2";
  elChat.appendChild(msgEl); scrollDown();

  reader = res.body.getReader();
  const decoder = new TextDecoder(); let buffer = '';
  while (true) {
    const { value, done } = await reader.read();
    if (done) break;
    buffer += decoder.decode(value, { stream: true });
    const parts = buffer.split('\n\n'); buffer = parts.pop() || '';
    for (const chunk of parts) {
      const line = chunk.trim().replace(/^data:\s?/, '');
      try {
        const payload = JSON.parse(line);
        if (payload.type === 'chunk' && payload.text) {
          msgEl.textContent += payload.text;
          scrollDown();
        }
      } catch {}
    }
  }
}

function appendAssistant(text){
  const div = document.createElement('div');
  div.className = "mb-2";
  div.textContent = text;
  elChat.appendChild(div);
  scrollDown();
}

function scrollDown(){ elChat.scrollTop = elChat.scrollHeight; }

// -------- renderizadores
function renderTop3(items){
  elTop3.innerHTML = items.map(cardHTML).join('');
  bindCardClicks('#top3');
}
function renderResults(items){
  elResults.innerHTML = `
  <div class="rounded-2xl border bg-white/90 backdrop-blur p-4 shadow-sm">
    <div class="text-sm font-semibold mb-3">Resultados</div>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">${items.map(cardHTML).join('')}</div>
  </div>`;
  bindCardClicks('#results');
}
function renderCombo(first){
  if (!first) { elCombo.innerHTML=''; return; }
  const cat = (first.category || '').toLowerCase();
  const accTerms = accessoriesFor(cat);
  if (!accTerms.length) { elCombo.innerHTML=''; return; }
  fetch(`/api/suggest?q=${encodeURIComponent(accTerms.join(' OR '))}`)
    .then(r=>r.json())
    .then(d=>{
      const items = (d.products || []).slice(0,12);
      elCombo.innerHTML = `
      <div class="rounded-2xl border bg-white/90 backdrop-blur p-4 shadow-sm">
        <div class="text-sm font-semibold mb-3">Combina com</div>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">${items.map(cardHTML).join('')}</div>
      </div>`;
      bindCardClicks('#combo');
    });
}
function accessoriesFor(cat){
  const map = {
    'celulares': ['capinha','película','carregador'],
    'telefone': ['capinha','película','carregador'],
    'smartphone': ['capinha','película','carregador'],
    'notebook': ['mochila','mouse','cooler'],
    'acessórios gamers': ['mouse gamer','teclado gamer','headset'],
    'câmeras': ['cartão sd','tripé','case']
  };
  return map[cat] || [];
}

function cardHTML(p){
  const price = p.price?.USD ? `USD <b>${p.price.USD}</b>` : `<span class="text-gray-400">sem preço</span>`;
  const badge = p.premium ? `<span class="ml-2 px-2 py-0.5 text-[10px] rounded bg-amber-100 text-amber-700">Premium</span>` : '';
  return `
    <button data-id="${encodeURIComponent(p.id)}" class="card text-left p-3 rounded-xl border hover:shadow-sm transition bg-white/90">
      <div class="font-medium truncate mb-1">${escapeHTML(p.title)} ${badge}</div>
      <div class="text-xs text-gray-500 mb-2">${escapeHTML(p.category || '—')} ${p.score!==undefined ? `• score ${p.score}` : ''}</div>
      <div class="text-sm">${price}</div>
    </button>
  `;
}
function bindCardClicks(scope){
  document.querySelectorAll(`${scope} [data-id]`).forEach(el=>{
    el.addEventListener('click', ()=>{
      const id = el.getAttribute('data-id');
      // Ajuste a rota conforme seu app:
      window.location.href = `/produto/${id}`;
    });
  });
}
function escapeHTML(s){ return (s||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
function debounce(fn,ms){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),ms); };}

Como rodar (Replit)

Crie um Repl “Node.js”, cole a estrutura acima.

Em Secrets, adicione OPENAI_API_KEY.

Clique Run. Abra a URL.

(Opcional) Ajuste src/data/stores.json com suas lojas reais (coloque plan: "premium" nas pagantes).

Notas / Recomendações

Rota de produto: se sua rota real não for /produto/:id, altere a função goProduct no app.js (ou use data-store pra ir pra loja).

Dados reais: troque stores.json por sua fonte (DB/API). Mantendo o formato {id,title,category,priceUSD} por produto, tudo continua funcionando.

Tom da IA: já está curto e bem-humorado; se quiser mais seco/rápido, reduza max_tokens e mantenha temperature: 0.15.

Pronto. Este pacote substitui o legado e resolve:

chat integrado à barra, dropdown sem esticar header;

scroll para baixo;

top 3 Premium na box, resto abaixo;

acessórios contextuais;

respostas ancoradas na base (menos genéricas).