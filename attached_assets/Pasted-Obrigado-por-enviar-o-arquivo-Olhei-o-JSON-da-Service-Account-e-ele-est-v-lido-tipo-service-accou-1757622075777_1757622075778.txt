Obrigado por enviar o arquivo. Olhei o JSON da Service Account e ele está válido (tipo service_account, projeto future-abode-407113, e-mail vertex-gen-image-sa@future-abode-407113.iam.gserviceaccount.com, token_uri correto). Ou seja: a credencial em si está ok; o erro “DECODER routines::unsupported” vem de como ela está sendo lida no seu código, não do arquivo. 

future-abode-407113-8e7a7c2d4b90

Primeiro: segurança

Você compartilhou uma chave privada. Revogue esta chave agora e gere outra:

Console → IAM e administrador → Contas de serviço → vertex-gen-image-sa → Chaves → excluir a chave cujo private_key_id termina em …a28 → Criar nova chave (JSON). 

future-abode-407113-8e7a7c2d4b90

Por que o seu erro acontece

O erro DECODER::unsupported aparece quando o Node/OpenSSL não consegue decodificar a private key, geralmente por:

Você colocou a chave no .env e os \n ficaram literais (\\n) → PEM inválido.

Passou o JSON inteiro ou uma API key no lugar da private_key.

Apontou para arquivo errado ou truncado.

Node antigo/problema de ambiente (use Node 18+).

O conteúdo do seu JSON está no formato esperado, então o caminho mais simples é usar o arquivo direto (sem copiar nada para .env). 

future-abode-407113-8e7a7c2d4b90

Conserto garantido (escolha 1 opção)
✅ Opção A — usar o arquivo JSON (recomendado)

Salve o novo JSON em um local seguro (ex.: /etc/keys/sa.json).

Exporte a variável apontando para o caminho do arquivo:

Windows: setx GOOGLE_APPLICATION_CREDENTIALS "C:\caminho\sa.json"

macOS/Linux: export GOOGLE_APPLICATION_CREDENTIALS=/caminho/sa.json

Código Node (não use ?key=):

import { GoogleAuth } from "google-auth-library";
const auth = new GoogleAuth({ scopes: "https://www.googleapis.com/auth/cloud-platform" });
const client = await auth.getClient();
const { token } = await client.getAccessToken(); // deve funcionar sem DECODER

✅ Opção B — sem arquivo, via .env (cuidando dos \n)

No .env (apenas 3 variáveis):

GOOGLE_PROJECT_ID=future-abode-407113
GOOGLE_CLIENT_EMAIL=vertex-gen-image-sa@future-abode-407113.iam.gserviceaccount.com
GOOGLE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...sua chave...\n-----END PRIVATE KEY-----\n"


Código:

import { GoogleAuth } from "google-auth-library";
const auth = new GoogleAuth({
  projectId: process.env.GOOGLE_PROJECT_ID,
  credentials: {
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: (process.env.GOOGLE_PRIVATE_KEY || "")
                  .replace(/\\n/g, "\n")   // transforma \n em quebras reais
                  .replace(/\r/g, ""),
  },
  scopes: "https://www.googleapis.com/auth/cloud-platform",
});

✅ Opção C — 1 variável com o JSON inteiro

No .env:

GOOGLE_CREDENTIALS_JSON={"type":"service_account","project_id":"future-abode-407113","private_key_id":"...","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"vertex-gen-image-sa@future-abode-407113.iam.gserviceaccount.com",...}


Código:

const creds = JSON.parse(process.env.GOOGLE_CREDENTIALS_JSON);
const auth = new GoogleAuth({ credentials: creds, scopes: "https://www.googleapis.com/auth/cloud-platform" });

Teste de 10 segundos (pega o problema na hora)

Antes de chamar o Vertex, valide a chave no seu processo:

import fs from "node:fs";
import crypto from "node:crypto";

const json = JSON.parse(fs.readFileSync(process.env.GOOGLE_APPLICATION_CREDENTIALS, "utf8"));
crypto.createPrivateKey({ key: json.private_key }); // se falhar aqui, é formatação/arquivo
console.log("Private key OK");


Ou, se estiver usando .env com GOOGLE_PRIVATE_KEY, faça o replace(/\\n/g, '\n') e teste do mesmo jeito.

Lembretes finais (para não voltar o erro)

Endpoint correto (Vertex):
https://us-central1-aiplatform.googleapis.com/v1/projects/SEU_PROJ/locations/us-central1/publishers/google/models/gemini-2.5-flash-image:generateContent

Headers: usar Authorization: Bearer <token>, jamais ?key=/x-goog-api-key.

Papéis da SA: Vertex AI User + Service Usage Consumer no projeto.

Node 18+.