j√° d√° pra ver avan√ßo claro (or√ßamento, sele√ß√£o de produtos e m√©tricas). Dito isso, ainda tem alguns ajustes importantes pra ficar ‚Äúredondo‚Äù e coerente com o motor de sorteios.

O que est√° ok

Tabela/config de or√ßamento + endpoints e UI com m√©tricas e alertas (di√°rio/mensal). 

sistema-orcamento-promocoes-com‚Ä¶

Query/endpoint para ‚Äúprodutos dispon√≠veis‚Äù e o campo productId no schema de pr√™mios. 

sistema-orcamento-promocoes-com‚Ä¶

Ajustes que eu recomendo (prioridade alta ‚Üí baixa)

Tipos num√©ricos no banco (evitar varchar)
Hoje dailyBudget, monthlyBudget, dailySpent, monthlySpent s√£o varchar e voc√™ usa parseFloat no backend/UI. Isso √© fr√°gil para soma, compara√ß√£o e concorr√™ncia. Troque para NUMERIC(12,2) (ou BIGINT em centavos) e remova parsing no servidor/cliente. Tamb√©m facilitar√° ‚Äúupdate at√¥mico‚Äù de or√ßamento no ato de premiar. 

sistema-orcamento-promocoes-com‚Ä¶

Moeda e localiza√ß√£o
O front exibe ‚ÄúR$ ‚Ä¶‚Äù e os coment√°rios falam em ‚Äúreais‚Äù, mas seu neg√≥cio opera em USD (como combinamos). Parametrize moeda/s√≠mbolo e formata√ß√£o (ex.: USD), e guarde a moeda no banco para n√£o ‚Äúvazar‚Äù BRL em telas/relat√≥rios. 

sistema-orcamento-promocoes-com‚Ä¶

Reset di√°rio/mensal baseado em America/Asuncion
Vejo lastResetDate, mas n√£o h√° rotina de reset. Implemente:

Di√°rio: zere dailySpent na virada de dia em America/Asuncion (n√£o use toISOString().split('T')[0], isso √© UTC e pode estourar o dia errado).

Mensal: zere monthlySpent no 1¬∫ dia do m√™s (tamb√©m no fuso local).
Guarde tamb√©m uma coluna local_date para ancorar relat√≥rios por dia local. 

sistema-orcamento-promocoes-com‚Ä¶

Custo estimado di√°rio: f√≥rmula e fontes
O c√°lculo atual usa probability √ó valor √ó maxDailyWins, com valor fixo de 25 para produtos. Isso n√£o reflete a realidade:

Valor do pr√™mio do tipo ‚Äúproduto‚Äù deve vir do productId selecionado (pre√ßo real), n√£o de um ‚Äú25‚Äù fixo. Voc√™ j√° tem o endpoint de produtos ‚Äî s√≥ encadeie isso na estimativa. 

sistema-orcamento-promocoes-com‚Ä¶

EV correto precisa da quantidade de tentativas/dia (ou usu√°rios/dia √ó cartas/usu√°rio). Sugest√£o: winsEsperadas = min( tentativasDia √ó p, maxDailyWins ) √ó redemptionRate. Para desconto/cashback, inclua taxa de resgate; n√£o √© todo ganho que vira custo. 

sistema-orcamento-promocoes-com‚Ä¶

Aplicar or√ßamento no ato de premiar (teto duro)
Hoje voc√™ mostra alertas, mas n√£o vi (neste arquivo) o bloqueio de premia√ß√£o quando dailyRemaining < custoDoPr√™mio. Garanta atomicamente no DB:

UPDATE budget_config SET daily_spent = daily_spent + :custo WHERE id=:id AND daily_spent + :custo <= daily_budget RETURNING *;
Se n√£o retornar linha, n√£o conceda o pr√™mio (e informe ‚Äúor√ßamento di√°rio esgotado‚Äù). Para isso, os campos precisam ser NUMERIC, n√£o varchar. 

sistema-orcamento-promocoes-com‚Ä¶

Shape do retorno de ‚Äúprodutos para pr√™mios‚Äù
O innerJoin normalmente retorna [products, stores] ou { products, stores }. Na UI voc√™ acessa product.stores?.name e product.id direto. Padronize o payload da rota para algo plano, por exemplo:

// no storage/rota
SELECT p.id, p.name, p.imageUrl, p.price, s.name AS storeName
// ‚Ä¶e no handler mapeie para { id, name, imageUrl, price, storeName }


Da√≠, no front, use product.storeName. Assim voc√™ evita quebras por shape de join. 

sistema-orcamento-promocoes-com‚Ä¶

‚Äútoday‚Äù n√£o usado e limpeza
Em getBudgetStats voc√™ cria today mas n√£o usa. Remova ou use para agrupar m√©tricas por data local (ver item 3). 

sistema-orcamento-promocoes-com‚Ä¶

Consist√™ncia com o motor de sorteios
Neste arquivo n√£o vi a parte do RNG seguro, pity rule revisada, m√°x. 1 pr√™mio/dia e d√©bito de estoque at√¥mico. Se eles j√° foram aplicados noutro m√≥dulo, perfeito ‚Äî s√≥ garanta que a pipeline de concess√£o fa√ßa: (a) escolher pr√™mio ponderado por probability, (b) debitar estoque com UPDATE ‚Ä¶ WHERE stock>0 RETURNING, (c) checar e debitar or√ßamento (item 5), e s√≥ ent√£o confirmar a vit√≥ria.

Snippets que ajudam a fechar as pontas

Drizzle (exemplo) ‚Äì NUMERIC e migra√ß√£o

// schema.ts
export const budgetConfig = pgTable("budget_config", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  dailyBudget: numeric("daily_budget", { precision: 12, scale: 2 }).default("0"),
  monthlyBudget: numeric("monthly_budget", { precision: 12, scale: 2 }).default("0"),
  dailySpent: numeric("daily_spent", { precision: 12, scale: 2 }).default("0"),
  monthlySpent: numeric("monthly_spent", { precision: 12, scale: 2 }).default("0"),
  lastResetDate: timestamp("last_reset_date").defaultNow(),
  // ‚Ä¶
});


Cheque de or√ßamento at√¥mico na concess√£o

// dentro de uma transa√ß√£o
const updated = await db.execute(sql`
  UPDATE budget_config
  SET daily_spent = daily_spent + ${prizeCost},
      monthly_spent = monthly_spent + ${prizeCost},
      updated_at = now()
  WHERE id = ${cfgId}
    AND daily_spent + ${prizeCost} <= daily_budget
    AND monthly_spent + ${prizeCost} <= monthly_budget
  RETURNING *;
`);
if (!updated.rowCount) {
  // Sem or√ßamento ‚Üí n√£o conceder
}


Pre√ßo real do produto na estimativa

// ao calcular EV do pr√™mio "product"
const price = selectedProduct?.price ?? 0;
estimatedValue = price; // ou pre√ßo de custo/margem, se preferir prud√™ncia


Fuso ‚ÄúAmerica/Asuncion‚Äù
Use uma lib de timezone (ex.: date-fns-tz) para calcular o ‚Äúdia local‚Äù de resets e relat√≥rios, evitando UTC.

Veredito

Dire√ß√£o certa ‚úÖ: or√ßamento, UI, sele√ß√£o de produto e estat√≠sticas.

Faltam amarra√ß√µes üîß: tipos num√©ricos, enforcement at√¥mico do or√ßamento, uso do pre√ßo real do produto, resets no fuso local e integrar essa camada com a pipeline de concess√£o (estoque + or√ßamento).
Acertando esses pontos, voc√™ fecha o loop financeiro/operacional de ponta a ponta.