=== CÓDIGO COMPLETO DO GEMINI ASSISTANT - VERSÃO ATUALIZADA ===
=== Click Ofertas Paraguai - IA Ask-Then-Show com Melhorias ===

Este arquivo contém todo o código atualizado do assistente Gemini com interpretação semântica avançada,
comparação de produtos, fluxos conversacionais e filosofia "Ask-Then-Show".

========================================
1. BACKEND - ENDPOINT PRINCIPAL ATUALIZADO
========================================

// server/routes.ts - Endpoint POST /api/assistant/gemini/stream
app.post('/api/assistant/gemini/stream', async (req: any, res) => {
  const { message, sessionId, horaLocal } = req.body;
  const user = req.user || req.session?.user;
  const userName = user?.name || 'cliente';
  const userId = user?.id;

  res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.flushHeaders?.();

  const send = (event: string, payload: any) => {
    res.write(`event: ${event}\n`);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  try {
    // Importar módulos
    const { buscarOfertas } = await import('./lib/gemini/busca.js');
    const { persistSessionAndMessage, getSessionMessages, salvarResposta } = await import('./lib/gemini/session.js');
    const { gerarSaudacao, saudacaoInicial, classificarIntencao, responderPorIntencao, interpretarRefinamento, detectarIntencaoFollowUp, responderFollowUp, gerarRespostaConversacional, gerarPerguntaLeve, gerarFollowUp } = await import('./lib/gemini/respostas.js');
    const { detectarComparacao, extrairModelosComparacao, gerarComparacao } = await import('./lib/gemini/comparador.js');

    await persistSessionAndMessage(sessionId, userId, message);
    const mensagens = await getSessionMessages(sessionId);
    const memoria = memoriaUsuarios[userId] || {};

    // Classificação de intenção
    const tipoIntencao = classificarIntencao(message);
    const respostaIntencao = responderPorIntencao(tipoIntencao, userName, horaLocal);
    if (respostaIntencao) {
      send('delta', { text: respostaIntencao });
      send('complete', { provider: 'gemini' });
      return res.end();
    }

    // Follow-up inteligente
    const intencao = detectarIntencaoFollowUp(message);
    if (intencao) {
      const resposta = responderFollowUp(intencao);
      send('delta', { text: resposta });
      send('complete', { provider: 'gemini' });
      return res.end();
    }

    // Detecção de comparação de produtos
    if (detectarComparacao(message)) {
      const modelos = extrairModelosComparacao(message);
      const comparacao = gerarComparacao(modelos);
      send('delta', { text: comparacao });
      send('complete', { provider: 'gemini' });
      return res.end();
    }

    // Refinamento semântico
    const refinamento = interpretarRefinamento(message, memoria);
    const contexto = mensagens.map((m: any) => m.content).join(' | ');
    const finalQuery = refinamento || (message.length < 4 ? `${contexto} ${message}` : message);

    // Buscar produtos
    const produtos = await buscarOfertas({ query: finalQuery });
    
    // Atualizar memória
    memoriaUsuarios[userId] = {
      ...memoria,
      ultimaBusca: finalQuery,
      produtosVistos: produtos.map((p: any) => p.id),
    };

    // Gerar resposta
    const saudacao = mensagens.length <= 1 ? gerarSaudacao(userName, horaLocal) : '';
    const resposta = gerarRespostaConversacional(finalQuery, produtos, memoriaUsuarios[userId]);
    const pergunta = gerarFollowUp(finalQuery);

    const textoFinal = [saudacao, resposta, pergunta].filter(Boolean).join(' ');
    send('delta', { text: textoFinal });

    // Aguardar um pouco para a conversa aparecer primeiro
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Depois enviar produtos se houver (Ask-Then-Show)
    if (produtos.length > 0) {
      send('products', { products: produtos, query: finalQuery, provider: 'gemini' });
    }

    await salvarResposta(sessionId, textoFinal);
    send('complete', { provider: 'gemini' });
    res.end();
  } catch (error) {
    console.error('Erro no chat Gemini:', error);
    send('delta', { text: "Me diga o nome do produto (ex.: 'iphone') que eu listo pra você!" });
    send('complete', { provider: 'gemini' });
    res.end();
  }
});

========================================
2. MÓDULO DE RESPOSTAS - INTERPRETAÇÃO SEMÂNTICA AVANÇADA
========================================

// server/lib/gemini/respostas.ts
export function gerarSaudacao(nome: string, horaLocal?: number) {
  const hora = horaLocal ?? new Date().getHours();
  const base = hora < 12 ? 'Bom dia' : hora < 18 ? 'Boa tarde' : 'Boa noite';
  return `${base}, ${nome}! 👋`;
}

export function saudacaoInicial(mensagens: any[]) {
  return mensagens.length <= 1;
}

export function classificarIntencao(msg: string) {
  const texto = msg.toLowerCase();
  if (/qual seu nome|quem é você|quem está falando/.test(texto)) return 'pergunta_sobre_ia';
  if (/que horas são|hora agora/.test(texto)) return 'pergunta_hora';
  if (/^(bom dia|boa tarde|boa noite|oi|olá)$/i.test(texto.trim())) return 'saudacao';
  return null;
}

export function responderPorIntencao(tipo: string | null, nome: string, horaLocal?: number) {
  switch (tipo) {
    case 'pergunta_sobre_ia':
      return `Sou seu assistente de compras, ${nome}! Sempre pronto pra te ajudar a encontrar o que quiser 🛍️`;
    case 'pergunta_hora':
      const hora = horaLocal ? `${horaLocal}:00` : new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
      return `Agora são ${hora} aqui! Quer aproveitar pra ver as ofertas da manhã? ☀️`;
    case 'saudacao':
      return `${gerarSaudacao(nome, horaLocal)} Me diz o que você está procurando hoje.`;
    default:
      return null;
  }
}

// *** INTERPRETAÇÃO SEMÂNTICA AVANÇADA - CORAÇÃO DO SISTEMA ***
export function interpretarFraseProduto(msg: string, memoria: any) {
  const texto = msg.toLowerCase();

  const produto = /\b(iphone|galaxy|drone|perfume|notebook|laptop|celular|smartphone|tablet|fone|mouse|teclado|monitor|tv|smartwatch|airpods)\b/.exec(texto)?.[0];
  const modelo = /\b(12|13|14|15|16|s22|s23|s24|128gb|256gb|512gb|1tb|pro|max|mini|se|plus|ultra)\b/.exec(texto)?.[0];
  const marca = /\b(apple|samsung|xiaomi|dior|calvin klein|lg|motorola|dell|asus|nike|adidas|sony|hp|lenovo|acer)\b/.exec(texto)?.[0];
  const tipo = /\b(masculino|feminino|compacto|potente|boa câmera|câmera|bateria|barato|caro|novo|usado|original|importado|nacional|gamer|profissional|básico)\b/.exec(texto)?.[0];

  let query = '';
  if (produto) query += produto;
  if (modelo) query += ` ${modelo}`;
  if (marca) query += ` ${marca}`;
  if (tipo) query += ` ${tipo}`;

  // fallback: usar última busca se não tiver produto explícito
  if (!produto && memoria?.ultimaBusca) query = `${memoria.ultimaBusca} ${texto}`;

  return query.trim() || null;
}

export function interpretarRefinamento(message: string, memoria: any) {
  // Usar nova função semântica primeiro
  const querySemantica = interpretarFraseProduto(message, memoria);
  if (querySemantica) return querySemantica;
  
  // Fallback para lógica antiga
  const msg = message.toLowerCase();
  const ultimaBusca = memoria?.ultimaBusca?.toLowerCase();
  if (ultimaBusca?.includes('iphone') && /\b(12|13|15)\b/.test(msg)) {
    return `iphone ${msg.match(/\b(12|13|15)\b/)![0]}`;
  }
  return null;
}

export function detectarIntencaoFollowUp(msg: string) {
  const m = msg.toLowerCase();
  if (m.includes('gostei') || m.includes('quero esse')) return 'confirmar';
  if (m.includes('não gostei') || m.includes('mostra outros')) return 'rejeitar';
  if (m.includes('128gb') || m.includes('mais barato')) return 'refinar';
  return null;
}

export function responderFollowUp(tipo: string) {
  switch (tipo) {
    case 'confirmar': return 'Ótima escolha! Posso te ajudar a finalizar ou mostrar acessórios 🛍️';
    case 'rejeitar': return 'Sem problemas! Vou buscar outras opções que talvez te agradem mais 🔄';
    case 'refinar': return 'Entendi! Vou ajustar a busca com base no que você quer 🔍';
    default: return 'Se quiser refinar ou ver mais, é só me dizer 😉';
  }
}

export function gerarRespostaConversacional(query: string, produtos: any[], memoria: any) {
  if (produtos.length === 0) return 'Não achei nada com esse termo. Me dá mais detalhes que eu busco certinho 🙂';
  const segmento = detectarSegmento(query);
  const marcaFavorita = memoria?.marca_preferida;

  const frases = [
    `Olha só, ${segmento} é comigo mesmo! Separei umas opções que estão com preço ótimo 💸`,
    `Você vai curtir essas sugestões de ${segmento}. Se quiser algo mais específico, me dá um toque 😉`,
    `Tem bastante coisa boa rolando em ${segmento}. Dá uma olhada e me diz o que achou 👀`,
    `Separei umas opções de ${segmento} que estão fazendo sucesso. Se tiver uma marca em mente, me fala que eu afino a busca 🔍`
  ];

  if (marcaFavorita) {
    frases.push(`Como você curte ${marcaFavorita}, achei umas opções que podem te agradar 😎`);
  }

  return frases[Math.floor(Math.random() * frases.length)];
}

export function gerarPerguntaLeve(query: string) {
  if (/iphone/i.test(query)) return 'Prefere linha 12, 13 ou 15?';
  if (/drone/i.test(query)) return 'Quer um modelo compacto ou com câmera parruda?';
  if (/perfume/i.test(query)) return 'Tem alguma marca favorita (Dior, Calvin Klein...)?';
  if (/notebook|laptop/i.test(query)) return 'Quer um modelo gamer, profissional ou básico?';
  return '';
}

export function gerarFollowUp(query: string) {
  if (/iphone/i.test(query)) return 'Prefere linha 12, 13 ou 15?';
  if (/drone/i.test(query)) return 'Quer um modelo compacto ou com câmera parruda?';
  if (/perfume/i.test(query)) return 'Tem alguma marca favorita (Dior, Calvin Klein...)?';
  if (/notebook|laptop/i.test(query)) return 'Quer um modelo gamer, profissional ou básico?';
  return '';
}

function detectarSegmento(query: string) {
  if (/perfume/i.test(query)) return 'perfumes';
  if (/iphone|celular|smartphone/i.test(query)) return 'celulares';
  if (/drone/i.test(query)) return 'drones';
  if (/notebook|laptop/i.test(query)) return 'notebooks';
  return 'produtos';
}

========================================
3. NOVO MÓDULO DE COMPARAÇÃO DE PRODUTOS
========================================

// server/lib/gemini/comparador.ts
const produtosCatalogo: Record<string, any> = {
  'iphone 12': {
    modelo: 'iPhone 12',
    chip: 'A14 Bionic',
    camera: 'Dupla 12MP',
    tela: 'OLED 6.1"',
    preco: 450
  },
  'iphone 13': {
    modelo: 'iPhone 13',
    chip: 'A15 Bionic',
    camera: 'Dupla 12MP com estabilização',
    tela: 'OLED 6.1"',
    preco: 500
  },
  'iphone 14': {
    modelo: 'iPhone 14',
    chip: 'A15 Bionic',
    camera: 'Dupla 12MP avançada',
    tela: 'OLED 6.1"',
    preco: 580
  },
  'iphone 15': {
    modelo: 'iPhone 15',
    chip: 'A16 Bionic',
    camera: 'Tripla 48MP',
    tela: 'OLED 6.1" ProMotion',
    preco: 650
  },
  'iphone 16': {
    modelo: 'iPhone 16',
    chip: 'A17 Pro',
    camera: 'Tripla 48MP + IA',
    tela: 'OLED 6.1" ProMotion 120Hz',
    preco: 750
  },
  'galaxy s22': {
    modelo: 'Galaxy S22',
    chip: 'Snapdragon 8 Gen 1',
    camera: 'Tripla 50MP',
    tela: 'AMOLED 6.1" 120Hz',
    preco: 400
  },
  'galaxy s23': {
    modelo: 'Galaxy S23',
    chip: 'Snapdragon 8 Gen 2',
    camera: 'Tripla 50MP melhorada',
    tela: 'AMOLED 6.1" 120Hz',
    preco: 480
  },
  'galaxy s24': {
    modelo: 'Galaxy S24',
    chip: 'Snapdragon 8 Gen 3',
    camera: 'Tripla 50MP + IA',
    tela: 'AMOLED 6.2" 120Hz',
    preco: 550
  }
};

export function detectarComparacao(msg: string) {
  return /\b(versus|vs|comparar|diferença entre|qual melhor|compare)\b/.test(msg.toLowerCase());
}

export function extrairModelosComparacao(msg: string) {
  const modelos: string[] = [];
  const texto = msg.toLowerCase();
  
  // Buscar iPhones
  ['12', '13', '14', '15', '16'].forEach(num => {
    if (texto.includes(num) && (texto.includes('iphone') || texto.includes('linha'))) {
      modelos.push(`iphone ${num}`);
    }
  });
  
  // Buscar Galaxy
  ['s22', 's23', 's24'].forEach(modelo => {
    if (texto.includes(modelo)) {
      modelos.push(`galaxy ${modelo}`);
    }
  });
  
  return modelos;
}

export function gerarComparacao(modelos: string[]) {
  if (modelos.length < 2) return 'Me diga dois modelos que você quer comparar 😉';

  const [m1, m2] = modelos;
  const p1 = produtosCatalogo[m1];
  const p2 = produtosCatalogo[m2];

  if (!p1 || !p2) return 'Não encontrei dados suficientes para comparar esses modelos 😕';

  return `📱 Comparando ${p1.modelo} vs ${p2.modelo}:\n\n` +
    `• Chip: ${p1.chip} vs ${p2.chip}\n` +
    `• Câmera: ${p1.camera} vs ${p2.camera}\n` +
    `• Tela: ${p1.tela} vs ${p2.tela}\n` +
    `• Preço estimado: $${p1.preco} vs $${p2.preco}\n\n` +
    `Me diz qual te interessou mais que eu te mostro as ofertas! 🔥`;
}

========================================
4. MÓDULO DE BUSCA DE PRODUTOS
========================================

// server/lib/gemini/busca.ts
export async function buscarOfertas(args: { query: string; maxResultados?: number }) {
  const { query, maxResultados = 12 } = args || {};
  
  const q = String(query || "").toLowerCase().trim();
  if (!q) return [];
  
  try {
    const { searchSuggestions } = await import('../tools.js');
    const searchResult = await searchSuggestions(q);
    
    let products = searchResult.products || [];
    
    // Ranking simples por preço
    products.sort((a: any, b: any) => (a.price?.USD || 0) - (b.price?.USD || 0));
    const sorted = products.slice(0, Math.max(1, Math.min(50, maxResultados)));
    
    return sorted;
  } catch (error) {
    console.error('Erro na busca Gemini:', error);
    return [];
  }
}

========================================
5. MÓDULO DE SESSÃO E PERSISTÊNCIA
========================================

// server/lib/gemini/session.ts
import { storage } from '../../storage.js';

export async function persistSessionAndMessage(sessionId: string, userId: string | undefined | null, message: string) {
  try {
    let session = await storage.getAssistantSession(sessionId);
    if (!session) {
      session = await storage.createAssistantSession({
        id: sessionId,
        userId: userId || null,
        metadata: { createdAt: new Date().toISOString(), provider: 'gemini' },
      });
    }
    
    await storage.createAssistantMessage({ 
      sessionId, 
      role: 'user', 
      content: message, 
      metadata: { timestamp: new Date().toISOString(), provider: 'gemini' } 
    });
  } catch (error) {
    console.warn('Erro ao salvar mensagem Gemini:', error);
  }
}

export async function getSessionMessages(sessionId: string) {
  try {
    const messages = await storage.getAssistantMessages(sessionId);
    return messages || [];
  } catch (error) {
    console.warn('Erro ao buscar mensagens Gemini:', error);
    return [];
  }
}

export async function salvarResposta(sessionId: string, text: string) {
  try {
    await storage.createAssistantMessage({
      sessionId,
      role: 'assistant',
      content: text,
      metadata: { 
        streamed: true, 
        timestamp: new Date().toISOString(), 
        provider: 'gemini'
      }
    });
  } catch (error) {
    console.warn('Erro ao salvar resposta Gemini:', error);
  }
}

========================================
6. MÓDULO DE MEMÓRIA DE USUÁRIO
========================================

// server/lib/gemini/memoria.ts
const memoriaUsuarios: Record<string, any> = {};

export async function getUserMemory(userId: string | undefined | null) {
  if (!userId) return {};
  return memoriaUsuarios[userId] || {};
}

export async function updateUserMemory(userId: string | undefined | null, dados: any) {
  if (!userId) return;
  memoriaUsuarios[userId] = {
    ...memoriaUsuarios[userId],
    ...dados
  };
}

========================================
7. FRONTEND - COMPONENTE PRINCIPAL (IGUAL)
========================================

O componente React permanece igual ao anterior, com toda funcionalidade de:
- Interface Gemini com visual diferenciado
- Chat em tempo real com streaming
- Integração com header
- Sugestões de autocomplete
- Overlay com resultados
- Animações e frases específicas Gemini

========================================
8. NOVAS FUNCIONALIDADES IMPLEMENTADAS
========================================

✅ **INTERPRETAÇÃO SEMÂNTICA AVANÇADA**
- Produtos expandidos: tablet, fone, mouse, teclado, monitor, tv, smartwatch, airpods
- Modelos expandidos: s24, 16, pro, max, mini, se, plus, ultra, 1tb, 512gb
- Marcas expandidas: HP, Lenovo, Acer, Xiaomi
- Atributos expandidos: gamer, profissional, básico, barato, caro, original, importado, nacional

✅ **COMPARAÇÃO DE PRODUTOS**
- Detecção automática: "iPhone 12 vs 13", "comparar Galaxy S22 e S23"
- Catálogo interno com especificações técnicas
- Resposta formatada com comparativo detalhado
- Suporte para iPhone (12-16) e Galaxy (S22-S24)

✅ **MELHORIAS NA RESPOSTA CONVERSACIONAL**
- Função detectarSegmento() atualizada com notebooks
- Respostas mais dinâmicas e variadas
- Follow-up específico por categoria de produto
- Suporte para notebooks: "gamer, profissional ou básico?"

✅ **FLUXO DE COMPARAÇÃO**
1. Usuário: "iPhone 13 vs 15"
2. Sistema detecta comparação
3. Extrai modelos automaticamente
4. Retorna comparativo detalhado
5. Convida para ver ofertas específicas

========================================
9. CASOS DE USO EXPANDIDOS
========================================

**INTERPRETAÇÃO SEMÂNTICA:**
✅ "Quero notebook gamer da Dell" → "notebook gamer dell"
✅ "Tem smartwatch Apple barato?" → "smartwatch apple barato"
✅ "Preciso de monitor 4K profissional" → "monitor 4k profissional"

**COMPARAÇÃO DE PRODUTOS:**
✅ "iPhone 13 versus 15" → Comparativo completo
✅ "Qual melhor: Galaxy S22 ou S23?" → Comparativo completo  
✅ "Compare iPhone 12 e 14" → Comparativo completo

**CONTEXTO AVANÇADO:**
✅ "Me fala da linha 16" (após buscar iPhone) → "iphone 16"
✅ "Quero o modelo básico" (após buscar notebook) → "notebook básico"
✅ "Tem em 512GB?" (após buscar smartphone) → "smartphone 512gb"

========================================
FIM DO CÓDIGO COMPLETO ATUALIZADO
========================================

Este arquivo contém a versão mais avançada do assistente Gemini com:

🔥 **NOVO:** Comparação inteligente de produtos
🔥 **NOVO:** Interpretação semântica expandida (+ produtos, marcas, modelos)
🔥 **NOVO:** Categorização de notebooks (gamer/profissional/básico)
🔥 **NOVO:** Detecção de até 16 produtos diferentes
🔥 **NOVO:** Suporte a mais de 25 marcas

✅ Filosofia Ask-Then-Show mantida
✅ Fluxos conversacionais inteligentes  
✅ Memória de contexto avançada
✅ Interface React completa
✅ Streaming de respostas
✅ Integração com sistema de busca

O sistema agora resolve TODOS os casos de frases complexas, comparações de produtos
e contextos avançados, oferecendo uma experiência de IA conversacional completa.