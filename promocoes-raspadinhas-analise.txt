===== AN√ÅLISE COMPLETA: SISTEMA DE PROMO√á√ïES E RASPADINHAS =====

PROBLEMA IDENTIFICADO: As promo√ß√µes chegam do backend mas n√£o aparecem como raspadinhas no frontend.

===============================================================================
1. BACKEND - API ENDPOINT QUE RETORNA AS PROMO√á√ïES
===============================================================================

Endpoint: GET /api/stores/:slug/my-available-promotions

Logs do servidor confirmam que est√° funcionando:
üéØ Promo√ß√µes j√° atribu√≠das ao usu√°rio acbcae7d-437c-4579-9646-22b4a4e48182: 1
üéØ Promo√ß√µes para usu√°rio acbcae7d-437c-4579-9646-22b4a4e48182: 1

‚úÖ BACKEND OK - Retorna 1 promo√ß√£o para o usu√°rio

===============================================================================
2. FRONTEND - BUSCA DAS PROMO√á√ïES (client/src/pages/public-flyer.tsx)
===============================================================================

// Buscar promo√ß√µes personalizadas para o usu√°rio
const { data: promotionsResponse, refetch: refetchPromotions } = useQuery<{promotions: any[], storeId?: string, userId?: string}>({
  queryKey: ['/api/stores', params?.slug, 'my-available-promotions'],
  queryFn: async () => {
    if (!params?.slug) return { promotions: [] };
    
    const response = await fetch(`/api/stores/${params.slug}/my-available-promotions`, {
      credentials: 'include' // Para enviar cookies de autentica√ß√£o
    });
    
    if (!response.ok) {
      console.log('üìù Erro na busca de promo√ß√µes personalizadas, usando fallback');
      return { promotions: [] };
    }
    
    const data = await response.json();
    return data;
  },
  enabled: !!params?.slug,
  staleTime: 30 * 1000,
  gcTime: 3 * 60 * 1000,
  refetchOnWindowFocus: false,
  refetchOnMount: true,
});

// Estado para remo√ß√£o local de promo√ß√µes
const [removedPromotions, setRemovedPromotions] = useState<string[]>([]);

// Filtrar promo√ß√µes removidas localmente
const activePromotions = (promotionsResponse?.promotions || []).filter(
  (promo: any) => !removedPromotions.includes(promo.id)
);

‚úÖ QUERY OK - Deve estar recebendo as promo√ß√µes

===============================================================================
3. CONVERS√ÉO DE PROMO√á√ïES PARA PRODUTOS
===============================================================================

// Converter promo√ß√µes para formato de produto
const promotionsAsProducts: Product[] = activePromotions.map((promotion) => ({
  id: promotion.id,
  name: promotion.name,
  description: promotion.description || "",
  price: promotion.originalPrice,
  imageUrl: promotion.imageUrl || "",
  imageUrl2: null,
  imageUrl3: null,
  category: promotion.category,
  storeId: promotion.storeId,
  isActive: true,
  isFeatured: true, // Destaque para promo√ß√µes
  showInStories: true,
  sortOrder: "0",
  isScratchCard: true,  // ‚≠ê CAMPO CR√çTICO
  scratchMessage: promotion.scratchMessage || "Parab√©ns! Voc√™ ganhou um desconto especial!",
  scratchPrice: promotion.promotionalPrice,
  scratchExpiresAt: promotion.validUntil || new Date().toISOString(),
  scratchTimeLimitMinutes: null,
  scratchBackgroundColor: null,
  maxScratchRedemptions: null,
  currentScratchRedemptions: null,
  createdAt: new Date(promotion.createdAt),
  updatedAt: new Date(promotion.updatedAt)
}));

‚úÖ CONVERS√ÉO OK - Define isScratchCard: true

===============================================================================
4. MESCLAGEM COM PRODUTOS NORMAIS
===============================================================================

// Mesclar produtos normais com promo√ß√µes
const allProductsWithPromotions = [...(store?.products || []), ...promotionsAsProducts];

const activeProducts = isStoriesView 
  ? allProductsWithPromotions.filter(p => p.isActive && p.showInStories)
  : allProductsWithPromotions.filter(p => p.isActive);

// Agrupar produtos por categoria
const productsByCategory = activeProducts.reduce((acc, product) => {
  const category = product.category || 'Geral';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(product);
  return acc;
}, {} as Record<string, typeof activeProducts>);

// Ordenar categorias por prioridade e alfab√©tica
const categoryOrder = ['Perfumes', 'Eletr√¥nicos', 'Pesca', 'Geral'];
const sortedCategories = Object.keys(productsByCategory).sort((a, b) => {
  const indexA = categoryOrder.indexOf(a);
  const indexB = categoryOrder.indexOf(b);
  if (indexA === -1 && indexB === -1) return a.localeCompare(b);
  if (indexA === -1) return 1;
  if (indexB === -1) return -1;
  return indexA - indexB;
});

// Filtrar produtos por categoria selecionada
const filteredProducts = selectedCategory === "all" 
  ? sortedCategories.flatMap(category => productsByCategory[category])
  : activeProducts.filter(product => (product.category || 'Geral') === selectedCategory);

‚ö†Ô∏è POSS√çVEL PROBLEMA AQUI - Verificar se as promo√ß√µes chegam at√© filteredProducts

===============================================================================
5. RENDERIZA√á√ÉO (A L√ìGICA DA RASPADINHA)
===============================================================================

{filteredProducts.map((product) => {
  return product.isScratchCard ? (
    // PROMO√á√ÉO: Renderiza como raspadinha
    <ScratchCard
      key={product.id}
      product={product}
      currency={store?.currency || 'USD'}
      themeColor={store?.themeColor || '#E11D48'}
      logoUrl={store?.logoUrl || undefined}
      onClick={(product) => {
        setSelectedProduct(product);
        setSelectedStore(store || null);
      }}
    />
  ) : (
    // PRODUTO NORMAL: Renderiza card comum
    <div 
      key={product.id} 
      className={`group cursor-pointer pb-4 mb-4 rounded-lg overflow-hidden ${
        product.isFeatured 
          ? 'border border-gray-200' 
          : 'border border-gray-200'
      }`}
      style={product.isFeatured ? {
        boxShadow: 'inset 0 0 0 1px #ef4444'
      } : {}}
      onClick={() => {
        setSelectedProduct(product);
        setSelectedStore(store || null);
      }}
    >
      {/* Card normal do produto */}
    </div>
  );
})}

‚úÖ L√ìGICA OK - Se product.isScratchCard === true, renderiza ScratchCard

===============================================================================
6. COMPONENTE SCRATCHCARD (client/src/components/scratch-card.tsx)
===============================================================================

export default function ScratchCard({ product, currency, themeColor, logoUrl, onRevealed, onClick }) {
  // ... Estados e l√≥gica ...
  
  // Mutation para gerar cupom ap√≥s raspar
  const generateCouponMutation = useMutation({
    mutationFn: async (productId: string) => {
      const response = await fetch(`/api/products/${productId}/generate-coupon`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`${response.status}: ${error}`);
      }
      
      return await response.json();
    },
    onSuccess: (data: any) => {
      if (data?.success && data?.coupon) {
        setCoupon(data.coupon);
        setCouponGenerated(true);
        setShowModal(false);
        setShowCouponModal(true);
        
        toast({
          title: "üéâ Cupom gerado!",
          description: "Veja os detalhes do seu cupom!",
        });
      }
    }
  });

  // ... Canvas e l√≥gica de raspar ...
  
  return (
    <Card className="relative overflow-hidden">
      {/* Interface da raspadinha */}
      <canvas ref={canvasRef} className="absolute inset-0 z-10 cursor-pointer" />
      {/* Conte√∫do revelado ap√≥s raspar */}
    </Card>
  );
}

‚úÖ COMPONENTE OK - Pronto para receber produtos com isScratchCard: true

===============================================================================
7. DIAGN√ìSTICO DO PROBLEMA
===============================================================================

SINTOMAS:
- ‚ùå Promo√ß√£o "iPhone 15" aparece como card normal
- ‚ùå N√£o aparece como raspadinha
- ‚úÖ Backend retorna 1 promo√ß√£o
- ‚úÖ L√≥gica de renderiza√ß√£o est√° correta

POSS√çVEIS CAUSAS:
1. activePromotions est√° vazio (apesar do backend retornar dados)
2. promotionsAsProducts n√£o est√° sendo criado
3. Promo√ß√µes se perdem durante a filtragem
4. isScratchCard n√£o est√° sendo setado corretamente

===============================================================================
8. SOLU√á√ÉO DE DEBUG
===============================================================================

ADICIONAR LOGS TEMPOR√ÅRIOS em client/src/pages/public-flyer.tsx:

// Ap√≥s a linha 199 (activePromotions):
console.log('üîç DEBUG 1 - promotionsResponse:', promotionsResponse);
console.log('üîç DEBUG 2 - activePromotions:', activePromotions);

// Ap√≥s a linha 343 (promotionsAsProducts):
console.log('üîç DEBUG 3 - promotionsAsProducts:', promotionsAsProducts);

// Ap√≥s a linha 350 (activeProducts):
console.log('üîç DEBUG 4 - activeProducts:', activeProducts.filter(p => p.isScratchCard));

// Ap√≥s a linha 376 (filteredProducts):
console.log('üîç DEBUG 5 - filteredProducts com raspadinha:', 
  filteredProducts.filter(p => p.isScratchCard).map(p => ({
    id: p.id, 
    name: p.name, 
    isScratchCard: p.isScratchCard
  }))
);

// Na renderiza√ß√£o (linha 759):
{filteredProducts.map((product) => {
  console.log('üîç DEBUG 6 - Renderizando produto:', product.name, 'isScratchCard:', product.isScratchCard);
  
  return product.isScratchCard ? (
    // ... ScratchCard
  ) : (
    // ... Card normal
  );
})}

===============================================================================
9. PR√ìXIMOS PASSOS
===============================================================================

1. ‚úÖ Adicionar logs de debug
2. ‚ùå Verificar onde as promo√ß√µes se perdem no pipeline
3. ‚ùå Corrigir o problema identificado
4. ‚ùå Remover logs de debug
5. ‚ùå Testar funcionalidade completa: criar promo√ß√£o ‚Üí aparecer raspadinha ‚Üí raspar ‚Üí gerar cupom ‚Üí salvar em "Meus Cupons"

===============================================================================
10. FLUXO COMPLETO ESPERADO
===============================================================================

1. Admin cria promo√ß√£o no painel ‚Üí Menu "Promo√ß√µes"
2. Promo√ß√£o fica dispon√≠vel via API ‚Üí /api/stores/:slug/my-available-promotions  
3. Frontend busca promo√ß√µes ‚Üí useQuery
4. Converte para produtos ‚Üí promotionsAsProducts com isScratchCard: true
5. Mescla com produtos normais ‚Üí allProductsWithPromotions
6. Filtra ativos ‚Üí activeProducts  
7. Filtra por categoria ‚Üí filteredProducts
8. Renderiza ‚Üí Se isScratchCard === true, usa <ScratchCard />
9. Usu√°rio raspa ‚Üí Chama generateCouponMutation
10. Gera cupom ‚Üí Modal aparece com detalhes
11. Cupom salvo ‚Üí Vai para "Meus Cupons"
12. Produto some ‚Üí Removido da lista

ESTADO ATUAL: Passo 8 falhando - produto n√£o √© reconhecido como raspadinha