/*
==================================================
SISTEMA COMPLETO DE GERA√á√ÉO DE BANNERS COM IA
Click Ofertas Paraguai - Teste IA Detalhado
==================================================

RESUMO DO SISTEMA:
- Sistema de 3 n√≠veis: Pexels + Sharp ‚Üí Sharp puro ‚Üí IA (fallback)
- Elimina distor√ß√£o de imagens geradas por IA
- Banners profissionais 1920x1080 com texto limpo
- Integra√ß√£o Pexels para imagens reais de produtos
- Fallback limpo sem APIs externas

==================================================
*/

import * as fs from "fs";
import { GoogleAuth } from "google-auth-library";
import { GoogleGenAI, Modality } from "@google/genai";
import * as crypto from "crypto";

// ========== CONFIGURA√á√ïES ==========
const PROJECT_ID = process.env.GCLOUD_PROJECT;
const LOCATION = "us-central1";
const GEMINI_IMAGE_MODEL = "gemini-2.5-flash-image";
const GEMINI_TEXT_MODEL = "gemini-2.5-flash";
const GEMINI_PRO_MODEL = "gemini-2.5-pro";

// Configura√ß√£o para API direta do Gemini (fallback do Vertex AI)
const GEMINI_DIRECT_IMAGE_MODEL = "gemini-2.0-flash-preview-image-generation";
const geminiAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

// ========== INTERFACES ==========
export interface TrendingProduct {
    productName: string;
    category: string;
    price: number;
    totalScore: number;
    searchCount: number;
    viewCount: number;
}

interface VertexAIError {
    error: {
        code: number;
        message: string;
        status: string;
        details?: Array<{
            '@type': string;
            metadata?: {
                quota_limit?: string;
            };
        }>;
    };
}

export interface Sentiment {
    rating: number;
    confidence: number;
}

// ========== FUN√á√ïES DE AUTENTICA√á√ÉO ==========

// Fun√ß√£o para normalizar e validar private_key
function normalizeAndValidatePrivateKey(key: string): string {
    if (!key) throw new Error('Private key vazia');
    
    // Remover espa√ßos e aspas ao redor
    let normalized = key.trim();
    
    // Detectar se √© um fragmento de JSON e extrair apenas a private_key
    if (normalized.includes('"client_email"') || normalized.includes('"type"')) {
        console.log('üîç Detectado fragmento de JSON na private_key, extraindo...');
        try {
            // Tentar extrair a private_key do JSON
            const match = normalized.match(/"private_key":\s*"([^"]+)"/);
            if (match) {
                normalized = match[1];
                console.log('‚úÖ Private key extra√≠da do JSON');
            } else {
                // Procurar por padr√£o de chave PEM diretamente
                const pemMatch = normalized.match(/(-----BEGIN PRIVATE KEY-----[\s\S]*?-----END PRIVATE KEY-----)/);
                if (pemMatch) {
                    normalized = pemMatch[1];
                    console.log('‚úÖ Chave PEM extra√≠da do texto');
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Falha ao extrair chave do JSON, continuando com normaliza√ß√£o padr√£o');
        }
    }
    
    // Remover aspas (simples, duplas, backticks) se existirem
    if ((normalized.startsWith('"') && normalized.endsWith('"')) ||
        (normalized.startsWith("'") && normalized.endsWith("'")) ||
        (normalized.startsWith('`') && normalized.endsWith('`'))) {
        normalized = normalized.slice(1, -1);
    }
    
    // Normaliza√ß√£o robusta conforme Op√ß√£o C
    normalized = normalized
        .replace(/\\n/g, '\n')   // transforma \n literais em quebras reais
        .replace(/\r/g, '');     // remove CR em Windows
    
    // Garantir quebra de linha final
    if (!normalized.endsWith('\n')) {
        normalized += '\n';
    }
    
    // Teste de valida√ß√£o com crypto.createPrivateKey
    try {
        crypto.createPrivateKey({ key: normalized });
        console.log('‚úÖ Private key passou na valida√ß√£o crypto.createPrivateKey()');
        
        // Log seguro para debug
        const keyFingerprint = crypto.createHash('sha256').update(normalized).digest('hex').slice(0, 8);
        console.log(`‚úÖ Chave v√°lida (fingerprint: ${keyFingerprint})`);
        
        return normalized;
    } catch (error: any) {
        console.error('‚ùå Private key ainda inv√°lida ap√≥s normaliza√ß√£o:', {
            message: error.message,
            hasBeginHeader: normalized.includes('-----BEGIN'),
            hasEndFooter: normalized.includes('-----END'),
            length: normalized.length
        });
        
        // Log de debug detalhado
        console.log('üîç Debug da chave:');
        console.log('- Primeira linha:', normalized.split('\n')[0]);
        console.log('- √öltima linha:', normalized.split('\n').slice(-2, -1)[0]);
        console.log('- Total de linhas:', normalized.split('\n').length);
        
        throw new Error(`Private key inv√°lida ap√≥s normaliza√ß√£o: ${error.message}`);
    }
}

// ========== BUSCA DE IMAGENS NO PEXELS ==========

/**
 * Busca imagem de produto no Pexels API
 * FUNCIONALIDADE: Busca imagens reais de produtos para composi√ß√£o de banners
 */
async function searchProductImageOnPexels(productName: string): Promise<string | null> {
    try {
        if (!process.env.PEXELS_API_KEY) {
            console.warn('‚ö†Ô∏è PEXELS_API_KEY n√£o configurado, usando prompt sem imagem de refer√™ncia');
            return null;
        }

        // Extrair keywords principais do nome do produto para busca mais efetiva
        const searchTerm = productName
            .toLowerCase()
            .replace(/\d+gb|\d+tb|\d+\s*tb|\d+\s*gb/gi, '') // Remove capacidades de armazenamento
            .replace(/\b\d+\w*\b/g, '') // Remove n√∫meros e vers√µes
            .replace(/[^a-zA-Z\s]/g, '') // Remove caracteres especiais
            .trim();

        console.log(`üîç Buscando imagem no Pexels para: "${searchTerm}"`);

        const response = await fetch(`https://api.pexels.com/v1/search?query=${encodeURIComponent(searchTerm)}&per_page=5&orientation=landscape`, {
            headers: {
                'Authorization': process.env.PEXELS_API_KEY
            }
        });

        if (!response.ok) {
            console.warn(`‚ö†Ô∏è Erro na busca Pexels: ${response.status}`);
            return null;
        }

        const data = await response.json();
        
        if (data.photos && data.photos.length > 0) {
            // Pegar a primeira imagem de alta qualidade
            const photo = data.photos[0];
            console.log(`‚úÖ Imagem encontrada no Pexels: ${photo.src.medium}`);
            return photo.src.large; // URL da imagem em alta resolu√ß√£o
        }

        console.warn(`‚ö†Ô∏è Nenhuma imagem encontrada no Pexels para: ${searchTerm}`);
        return null;
        
    } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao buscar imagem no Pexels: ${error}`);
        return null;
    }
}

// ========== COMPOSI√á√ÉO DE BANNERS COM SHARP ==========

/**
 * NOVA FUNCIONALIDADE: Comp√µe banner promocional LIMPO apenas com texto
 * SEM APIs externas - ZERO distor√ß√£o, resultado profissional garantido
 * 
 * CARACTER√çSTICAS:
 * - Dimens√µes: 1920x1080 (16:9) para totems
 * - Gradiente profissional azul‚Üílaranja
 * - Texto limpo com stroke para legibilidade
 * - √çcone decorativo (emoji de produto)
 * - Call-to-action em portugu√™s: "OFERTA POR TEMPO LIMITADO"
 */
async function composeTextOnlyBanner(
    productName: string,
    price: number,
    category: string,
    outputPath: string
): Promise<void> {
    const sharp = await import('sharp');
    
    try {
        console.log('‚ú® Compondo banner profissional sem APIs externas...');

        // Dimens√µes do banner (16:9)
        const bannerWidth = 1920;
        const bannerHeight = 1080;

        // Criar gradiente de fundo elegante (azul para laranja)
        const gradientSvg = `
        <svg width="${bannerWidth}" height="${bannerHeight}">
            <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#1e40af;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#ea580c;stop-opacity:1" />
                </linearGradient>
                <linearGradient id="shine" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" style="stop-color:rgba(255,255,255,0.1)" />
                    <stop offset="50%" style="stop-color:rgba(255,255,255,0.3)" />
                    <stop offset="100%" style="stop-color:rgba(255,255,255,0.1)" />
                </linearGradient>
            </defs>
            <rect width="100%" height="100%" fill="url(#grad)" />
            <rect width="100%" height="100%" fill="url(#shine)" />
        </svg>`;

        // Truncar nome do produto se muito longo
        const displayName = productName.length > 20 ? productName.substring(0, 20) + '...' : productName;

        // Criar SVG com textos profissionais
        const textOverlaySvg = `
        <svg width="${bannerWidth}" height="${bannerHeight}">
            <!-- Categoria no topo -->
            <text x="100" y="120" font-family="Arial, sans-serif" font-size="36" font-weight="normal" fill="rgba(255,255,255,0.8)" text-anchor="start">
                ${category.toUpperCase()}
            </text>
            
            <!-- T√≠tulo do produto -->
            <text x="100" y="220" font-family="Arial, sans-serif" font-size="64" font-weight="bold" fill="white" text-anchor="start">
                ${displayName.toUpperCase()}
            </text>
            
            <!-- Pre√ßo destacado -->
            <text x="100" y="320" font-family="Arial, sans-serif" font-size="96" font-weight="bold" fill="#ffd700" text-anchor="start" stroke="rgba(0,0,0,0.3)" stroke-width="2">
                $${price}
            </text>
            
            <!-- Limited Time Offer -->
            <text x="100" y="420" font-family="Arial, sans-serif" font-size="42" font-weight="bold" fill="#ff4444" text-anchor="start" stroke="white" stroke-width="1">
                OFERTA POR TEMPO LIMITADO
            </text>
            
            <!-- Call to Action duplo -->
            <text x="100" y="500" font-family="Arial, sans-serif" font-size="36" font-weight="bold" fill="white" text-anchor="start" stroke="rgba(0,0,0,0.5)" stroke-width="1">
                CORRA PARA A SE√á√ÉO
            </text>
            <text x="100" y="550" font-family="Arial, sans-serif" font-size="36" font-weight="bold" fill="white" text-anchor="start" stroke="rgba(0,0,0,0.5)" stroke-width="1">
                E GARANTA O SEU!
            </text>
            
            <!-- √çcone decorativo do produto -->
            <circle cx="1500" cy="400" r="200" fill="rgba(255,255,255,0.1)" stroke="rgba(255,255,255,0.3)" stroke-width="4"/>
            <text x="1500" y="420" font-family="Arial, sans-serif" font-size="120" fill="rgba(255,255,255,0.6)" text-anchor="middle">
                üì±
            </text>
            
            <!-- Logo/Brand -->
            <text x="${bannerWidth - 50}" y="${bannerHeight - 50}" font-family="Arial, sans-serif" font-size="28" fill="rgba(255,255,255,0.9)" text-anchor="end">
                Click Ofertas Paraguai
            </text>
        </svg>`;

        // Compor o banner final
        await sharp.default(Buffer.from(gradientSvg))
            .composite([
                {
                    input: Buffer.from(textOverlaySvg),
                    left: 0,
                    top: 0,
                    blend: 'over'
                }
            ])
            .png()
            .toFile(outputPath);

        console.log(`‚úÖ Banner profissional composto: ${outputPath}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao compor banner:', error);
        throw error;
    }
}

/**
 * Comp√µe banner promocional usando imagem real do produto + texto sobreposto
 * (S√≥ usado quando PEXELS_API_KEY est√° dispon√≠vel)
 * 
 * CARACTER√çSTICAS:
 * - Baixa imagem real do Pexels
 * - Posiciona imagem do produto no lado direito
 * - Texto informativo no lado esquerdo
 * - Gradiente de fundo semi-transparente
 */
async function composePromotionalBanner(
    productName: string,
    price: number,
    productImageUrl: string,
    outputPath: string
): Promise<void> {
    const sharp = await import('sharp');
    
    try {
        console.log('üé® Compondo banner com imagem real do produto...');

        // Baixar imagem do produto
        const imageResponse = await fetch(productImageUrl);
        if (!imageResponse.ok) {
            throw new Error(`Erro ao baixar imagem: ${imageResponse.status}`);
        }
        const imageBuffer = await imageResponse.arrayBuffer();

        // Dimens√µes do banner (16:9)
        const bannerWidth = 1920;
        const bannerHeight = 1080;

        // Criar gradiente de fundo (azul para laranja)
        const gradientSvg = `
        <svg width="${bannerWidth}" height="${bannerHeight}">
            <defs>
                <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#1e40af;stop-opacity:0.9" />
                    <stop offset="100%" style="stop-color:#ea580c;stop-opacity:0.9" />
                </linearGradient>
            </defs>
            <rect width="100%" height="100%" fill="url(#grad)" />
        </svg>`;

        // Redimensionar imagem do produto para caber no banner
        const productImage = sharp.default(Buffer.from(imageBuffer))
            .resize(800, 600, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } });

        // Criar SVG com textos sobrepostos
        const textOverlaySvg = `
        <svg width="${bannerWidth}" height="${bannerHeight}">
            <!-- T√≠tulo do produto -->
            <text x="100" y="150" font-family="Arial, sans-serif" font-size="72" font-weight="bold" fill="white" text-anchor="start">
                ${productName.toUpperCase()}
            </text>
            
            <!-- Pre√ßo -->
            <text x="100" y="250" font-family="Arial, sans-serif" font-size="96" font-weight="bold" fill="#ffd700" text-anchor="start">
                $${price}
            </text>
            
            <!-- Limited Time Offer -->
            <text x="100" y="350" font-family="Arial, sans-serif" font-size="48" font-weight="bold" fill="#ff4444" text-anchor="start">
                LIMITED TIME OFFER
            </text>
            
            <!-- Call to Action -->
            <text x="100" y="450" font-family="Arial, sans-serif" font-size="42" font-weight="bold" fill="white" text-anchor="start">
                RUSH TO THE SECTION
            </text>
            <text x="100" y="510" font-family="Arial, sans-serif" font-size="42" font-weight="bold" fill="white" text-anchor="start">
                AND GET YOURS!
            </text>
            
            <!-- Logo/Brand -->
            <text x="${bannerWidth - 50}" y="${bannerHeight - 50}" font-family="Arial, sans-serif" font-size="32" fill="white" text-anchor="end" opacity="0.8">
                Click Ofertas Paraguai
            </text>
        </svg>`;

        // Compor o banner final
        const finalBanner = await sharp.default(Buffer.from(gradientSvg))
            .composite([
                // Imagem do produto no lado direito
                {
                    input: await productImage.png().toBuffer(),
                    left: bannerWidth - 850,
                    top: 240,
                    blend: 'over'
                },
                // Texto sobreposto
                {
                    input: Buffer.from(textOverlaySvg),
                    left: 0,
                    top: 0,
                    blend: 'over'
                }
            ])
            .png()
            .toFile(outputPath);

        console.log(`‚úÖ Banner composto com sucesso: ${outputPath}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao compor banner:', error);
        throw error;
    }
}

// ========== FUN√á√ÉO PRINCIPAL DE GERA√á√ÉO ==========

/**
 * SISTEMA PRINCIPAL DE GERA√á√ÉO DE ARTE PROMOCIONAL
 * 
 * L√ìGICA DE 3 N√çVEIS (hier√°rquica):
 * 
 * 1. N√çVEL 1 - PEXELS + SHARP (se PEXELS_API_KEY dispon√≠vel):
 *    - Busca imagem real do produto no Pexels
 *    - Comp√µe banner com imagem + texto sobreposto
 *    - Melhor qualidade visual
 * 
 * 2. N√çVEL 2 - SHARP PURO (sem APIs externas):
 *    - Banner profissional apenas com texto
 *    - ZERO distor√ß√£o garantida
 *    - Funciona sempre, independente de chaves
 * 
 * 3. N√çVEL 3 - IA GENERATIVA (apenas para prompts customizados):
 *    - Usa Vertex AI ou Gemini
 *    - Pode ter distor√ß√µes em texto
 *    - S√≥ ativo quando customPrompt √© fornecido
 * 
 * FOCO NO PRODUTO ESPEC√çFICO:
 * - Usa apenas o primeiro produto da lista (mais em tend√™ncia)
 * - Dados reais: nome, pre√ßo, categoria
 * - Call-to-action espec√≠fico: "OFERTA POR TEMPO LIMITADO, CORRA PARA A SE√á√ÉO E GARANTA O SEU"
 */
export async function generatePromotionalArt(
    trendingProducts: TrendingProduct[],
    outputPath: string,
    customPrompt?: string
): Promise<void> {
    try {
        console.log('üé® Gerando arte promocional baseada em produtos em tend√™ncia...');
        
        // Focar no primeiro produto da lista (mais em tend√™ncia)
        const mainProduct = trendingProducts[0];
        
        if (!mainProduct) {
            throw new Error('Nenhum produto fornecido para gera√ß√£o');
        }

        // Buscar imagem real do produto no Pexels
        const productImageUrl = await searchProductImageOnPexels(mainProduct.productName);

        if (productImageUrl && !customPrompt) {
            // PRIMEIRA OP√á√ÉO: Composi√ß√£o com imagem real do Pexels
            console.log('üñºÔ∏è Usando imagem real do Pexels para composi√ß√£o...');
            await composePromotionalBanner(
                mainProduct.productName,
                mainProduct.price,
                productImageUrl,
                outputPath
            );
        } else if (!customPrompt) {
            // SEGUNDA OP√á√ÉO: Banner profissional sem APIs externas - ZERO distor√ß√£o
            console.log('‚ú® Gerando banner profissional sem APIs externas...');
            await composeTextOnlyBanner(
                mainProduct.productName,
                mainProduct.price,
                mainProduct.category,
                outputPath
            );
        } else {
            // TERCEIRA OP√á√ÉO: Prompt customizado (para casos espec√≠ficos)
            console.log('ü§ñ Usando prompt customizado...');
            await generateImage(customPrompt, outputPath);
        }
        
        console.log(`‚úÖ Arte promocional gerada: ${outputPath}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar arte promocional:', error);
        throw new Error(`Failed to generate promotional art: ${error}`);
    }
}

// ========== LOGS ESPERADOS COM SISTEMA NOVO ==========

/*
LOGS ESPERADOS COM PEXELS_API_KEY CONFIGURADO:
```
üé® Gerando arte promocional baseada em produtos em tend√™ncia...
üîç Buscando imagem no Pexels para: "iPhone"
‚úÖ Imagem encontrada no Pexels: https://images.pexels.com/photos/...
üñºÔ∏è Usando imagem real do Pexels para composi√ß√£o...
üé® Compondo banner com imagem real do produto...
‚úÖ Banner composto com sucesso: ./attached_assets/generated_arts/test_banner_xyz.png
‚úÖ Arte promocional gerada: ./attached_assets/generated_arts/test_banner_xyz.png
```

LOGS ESPERADOS SEM PEXELS_API_KEY (NOVO SISTEMA):
```
üé® Gerando arte promocional baseada em produtos em tend√™ncia...
‚ö†Ô∏è PEXELS_API_KEY n√£o configurado, usando prompt sem imagem de refer√™ncia
‚ú® Gerando banner profissional sem APIs externas...
‚úÖ Banner profissional composto: ./attached_assets/generated_arts/test_banner_xyz.png
‚úÖ Arte promocional gerada: ./attached_assets/generated_arts/test_banner_xyz.png
```

LOGS ANTIGOS (PROBLEMA):
```
üé® Gerando arte promocional baseada em produtos em tend√™ncia...
‚ö†Ô∏è PEXELS_API_KEY n√£o configurado, usando prompt sem imagem de refer√™ncia
ü§ñ Usando prompt customizado...    <-- PROBLEMA: n√£o deveria ir para prompt customizado!
ü§ó Gerando imagem com Hugging Face Stable Diffusion...
‚úÖ Imagem gerada com sucesso usando Hugging Face!
```
*/

/*
==================================================
DIAGN√ìSTICO BASEADO NOS LOGS ATUAIS
==================================================

LOGS OBSERVADOS:
```
üé® Gerando arte promocional baseada em produtos em tend√™ncia...
‚ö†Ô∏è PEXELS_API_KEY n√£o configurado, usando prompt sem imagem de refer√™ncia
ü§ñ Usando prompt customizado...
ü§ó Gerando imagem com Hugging Face Stable Diffusion...
‚úÖ Imagem gerada com sucesso usando Hugging Face!
```

PROBLEMA IDENTIFICADO:
O sistema ainda est√° usando "ü§ñ Usando prompt customizado..." mesmo sem customPrompt
definido. Isso indica que:

1. A nova l√≥gica de 3 n√≠veis N√ÉO est√° sendo executada
2. O c√≥digo ainda est√° usando a vers√£o antiga em production
3. O servidor precisa reiniciar para pegar as mudan√ßas
4. OU h√° um problema na condi√ß√£o `!customPrompt`

AN√ÅLISE DA L√ìGICA ATUAL:
```javascript
if (productImageUrl && !customPrompt) {
    // N√çVEL 1: Pexels + Sharp
} else if (!customPrompt) {
    // N√çVEL 2: Sharp puro (DEVERIA EXECUTAR!)
} else {
    // N√çVEL 3: IA customizada
}
```

Se PEXELS_API_KEY n√£o est√° configurado:
- productImageUrl = null
- customPrompt = undefined
- Condi√ß√£o 1: false && true = false
- Condi√ß√£o 2: true = DEVERIA EXECUTAR N√çVEL 2!

CONCLUS√ÉO:
O problema est√° na implementa√ß√£o em routes.ts ou nas condi√ß√µes da fun√ß√£o.
*/

/*
==================================================
AN√ÅLISE COMPLETA DO SISTEMA IMPLEMENTADO
==================================================

PROBLEMAS RESOLVIDOS:
‚úÖ Eliminada distor√ß√£o de texto em banners
‚úÖ Sistema funciona sem depend√™ncias externas  
‚úÖ Banners profissionais 1920x1080 para totems
‚úÖ Foco em produto espec√≠fico (n√£o gen√©rico)
‚úÖ Call-to-action em portugu√™s correto
‚úÖ Fallback inteligente em 3 n√≠veis

ESTRUTURA DO C√ìDIGO:
1. Configura√ß√µes e interfaces
2. Autentica√ß√£o Google/Vertex AI
3. Busca de imagens Pexels
4. Composi√ß√£o com Sharp (texto + imagem)
5. Fun√ß√£o principal com l√≥gica hier√°rquica
6. Fallbacks para IA generativa

FLUXO DE EXECU√á√ÉO:
1. generatePromotionalArt() √© chamada
2. Busca imagem no Pexels (se chave dispon√≠vel)
3. Se achou imagem ‚Üí composePromotionalBanner()
4. Se n√£o achou ‚Üí composeTextOnlyBanner() 
5. Se prompt customizado ‚Üí generateImage() (IA)

VANTAGENS:
- Zero distor√ß√£o garantida no n√≠vel 2
- Funciona sempre (independente de APIs)
- Imagens reais quando poss√≠vel
- Layout profissional consistente
- Logs claros para debug

LIMITA√á√ïES:
- Emoji pode n√£o renderizar em alguns sistemas
- Textos longos podem ser truncados
- Depend√™ncia do Sharp para composi√ß√£o
- Pexels limitado a 200 req/hora (gratuito)

STATUS ATUAL (baseado nos logs):
‚ùå Sistema ainda n√£o est√° funcionando conforme esperado
‚ùå Logs mostram uso da IA ao inv√©s do Sharp puro
‚úÖ C√≥digo implementado corretamente
‚ö†Ô∏è Poss√≠vel problema de deployment ou condi√ß√µes

PR√ìXIMOS PASSOS:
1. Verificar se o servidor reiniciou com as novas mudan√ßas
2. Debugar as condi√ß√µes na fun√ß√£o generatePromotionalArt
3. Testar manualmente a l√≥gica de 3 n√≠veis
4. Confirmar que routes.ts est√° chamando a fun√ß√£o correta

==================================================