======================================================================================
                    SISTEMA DE RASPADINHA DIÁRIA - CLICK OFERTAS PARAGUAI
                           Documentação Completa das Funcionalidades
======================================================================================

ÍNDICE:
1. VISÃO GERAL DA ARQUITETURA
2. FUNCIONALIDADES PRINCIPAIS  
3. SISTEMA DE PROBABILIDADES E ALGORITMOS
4. FLUXO DE FUNCIONAMENTO
5. ESTRUTURA DE DADOS
6. CONFIGURAÇÕES AVANÇADAS
7. LOCALIZAÇÃO DO CÓDIGO

======================================================================================
1. VISÃO GERAL DA ARQUITETURA
======================================================================================

O sistema de raspadinha diária é composto por:

FRONTEND (client/src/components/):
- ThreeDailyScratchCards.tsx: Componente principal que exibe 6 cards (3x2)
- scratch-card.tsx: Componente individual de raspadinha com efeitos
- BannerSection.tsx: Integração com banners rotativos

BACKEND (server/):
- routes.ts: Endpoints da API (/api/daily-scratch/*)
- storage.ts: Métodos de acesso ao banco de dados
- services/intelligentScratchAlgorithm.ts: ALGORITMO DE PROBABILIDADES

BANCO DE DADOS (shared/schema.ts):
- dailyScratchCards: Cartas diárias dos usuários
- dailyPrizes: Prêmios disponíveis
- scratchSystemConfig: Configurações de probabilidade
- algorithmSuggestions: Sugestões inteligentes de produtos

======================================================================================
2. FUNCIONALIDADES PRINCIPAIS
======================================================================================

A) SISTEMA DE 6 CARTAS DIÁRIAS:
-----------------------------
- Cada usuário recebe EXATAMENTE 6 cartas por dia (2 filas x 3 colunas)
- Cards são criados automaticamente ao acessar a página
- Não podem ser raspados duas vezes
- Reset automático à meia-noite

LOCALIZAÇÃO: 
- client/src/components/ThreeDailyScratchCards.tsx (linhas 1-518)
- server/routes.ts (linha 2990: app.get('/api/daily-scratch/cards'))

B) EFEITO DE RASPAGEM REALISTA:
------------------------------
- Canvas HTML5 com imagem do mascote como fundo
- Efeito sonoro "xiado xiiii" (ruído branco filtrado 2-3kHz)
- Threshold de 70% para revelar o prêmio (linha 120 ThreeDailyScratchCards.tsx)
- Radius de 10px, step 10, delay 500ms para aumentar dificuldade

LOCALIZAÇÃO:
- client/src/components/scratch-card.tsx (linhas 1-1111)
- Função measureRealProgress() (linha 94)

C) SISTEMA DE PRÊMIOS INTELIGENTE:
---------------------------------
- Prêmios categorizados: desconto_10, desconto_20, desconto_30, desconto_50, desconto_70, product, none
- Algoritmo inteligente seleciona produtos baseado em popularidade, preço, margem, novidade
- Probabilidades configuráveis via painel super admin

LOCALIZAÇÃO:
- server/services/intelligentScratchAlgorithm.ts (TODO O ARQUIVO)

D) PREVENÇÃO DE DUPLICATAS:
--------------------------
- Sistema anti-fraud impede múltiplas raspagens
- Flags de controle: generatingCoupon, revelationStarted
- Verificação de status no banco antes de permitir raspagem

LOCALIZAÇÃO:
- server/storage.ts (linha 2088-2131: função getMyAvailablePromotions)

======================================================================================
3. SISTEMA DE PROBABILIDADES E ALGORITMOS
======================================================================================

*** ESTA É A PARTE MAIS IMPORTANTE - ONDE ESTÃO AS PROBABILIDADES ***

A) ALGORITMO PRINCIPAL DE SELEÇÃO:
----------------------------------
ARQUIVO: server/services/intelligentScratchAlgorithm.ts

FUNÇÃO PRINCIPAL: generateProductSuggestions() (linha 52)
- Analisa TODOS os produtos ativos da plataforma
- Calcula 5 scores diferentes para cada produto:
  1. POPULARIDADE (linha 177): likes*3 + saves*2 + views*1
  2. PREÇO (linha 216): faixas ideais R$20-100 = score 10
  3. MARGEM (linha 234): baseado na diferença de preço vs custo
  4. NOVIDADE (linha 251): produtos mais recentes ganham pontos
  5. CATEGORIA (linha 268): certas categorias são favorecidas

B) PESOS CONFIGURÁVEIS:
----------------------
ARQUIVO: shared/schema.ts (linha 1150: tabela scratchSystemConfig)

PESOS PADRÃO:
- popularityWeight: 0.30 (30%)
- priceWeight: 0.20 (20%)  
- marginWeight: 0.20 (20%)
- noveltyWeight: 0.15 (15%)
- categoryWeight: 0.15 (15%)

C) THRESHOLDS DE PRÊMIOS:
------------------------
ARQUIVO: server/services/intelligentScratchAlgorithm.ts (linha 82)

CONFIGURAÇÃO DE PRÊMIOS POR SCORE:
- Score >= 8.5: PRODUTO GRÁTIS (prêmio total)
- Score >= 8.0: DESCONTO 70%
- Score >= 7.0: DESCONTO 50%  
- Score >= 6.5: DESCONTO 30%
- Score >= 6.0: DESCONTO 20%
- Score < 6.0: SEM PRÊMIO

D) ALGORITMO DE PROBABILIDADE DE VITÓRIA:
----------------------------------------
ARQUIVO: server/storage.ts (linha 2822: função scratchDailyScratchCard)

FÓRMULA DE PROBABILIDADE:
const winChance = 0.15; // 15% de chance base
if (Math.random() < winChance) {
    // USUÁRIO GANHA
} else {
    // USUÁRIO PERDE
}

*** ESTA É A LINHA ONDE VOCÊ PODE ALTERAR A PROBABILIDADE DE GANHAR ***

E) SISTEMA DE GARANTIA DE VITÓRIA:
---------------------------------
ARQUIVO: shared/schema.ts (linha 1155)

CONFIGURAÇÃO: guaranteedWinEvery: "1000"
- A cada 1000 tentativas, sistema FORÇA uma vitória
- Contador global: currentAttemptCount
- Reseta automaticamente após vitória garantida

======================================================================================
4. FLUXO DE FUNCIONAMENTO
======================================================================================

PASSO 1: INICIALIZAÇÃO
---------------------
1. Usuário acessa a página principal
2. Sistema verifica se existem 6 cartas para hoje
3. Se não existem, cria automaticamente (ensureUserDailyScratchCards)
4. Exibe os 6 cards em layout 3x2

PASSO 2: RASPAGEM
----------------
1. Usuário clica e arrasta sobre o card
2. Canvas detecta movimento e "raspa" pixels (composite-operation: destination-out)
3. Sistema mede progresso real por transparência alpha
4. Aos 70% de progresso, inicia revelação automática

PASSO 3: REVELAÇÃO
-----------------
1. Sistema consulta algoritmo inteligente
2. Calcula score do produto/prêmio
3. Aplica probabilidade de 15% de vitória
4. Se ganhou: gera cupom e exibe modal
5. Se perdeu: exibe mensagem "Não foi dessa vez"

PASSO 4: PÓS-RASPAGEM
--------------------
1. Atualiza status da carta no banco (isScratched: true)
2. Registra tentativa diária
3. Invalida cache para atualizar interface
4. Card fica desabilitado até o próximo dia

======================================================================================
5. ESTRUTURA DE DADOS
======================================================================================

TABELA: dailyScratchCards
------------------------
- id: Identificador único da carta
- userId: ID do usuário proprietário
- cardNumber: Número da carta (1-6)
- dateCreated: Data de criação (YYYY-MM-DD)
- isScratched: Se foi raspada (boolean)
- won: Se ganhou prêmio (boolean)
- prizeType: Tipo do prêmio (desconto_X, product, none)
- prizeValue: Valor do prêmio
- prizeDescription: Descrição textual
- couponCode: Código do cupom gerado

TABELA: dailyPrizes
------------------
- id: ID do prêmio
- name: Nome do prêmio
- prizeType: Categoria (desconto_10, desconto_20, etc.)
- description: Descrição
- value: Valor monetário
- isActive: Se está ativo
- validFrom/validUntil: Período de validade

TABELA: scratchSystemConfig
--------------------------
- algorithmType: Tipo de algoritmo ("weighted_random")
- guaranteedWinEvery: Intervalo de vitória garantida
- popularityWeight/priceWeight/etc: Pesos do algoritmo
- minPrizeValue/maxPrizeValue: Limites de valor dos prêmios

======================================================================================
6. CONFIGURAÇÕES AVANÇADAS
======================================================================================

A) ALTERANDO PROBABILIDADES:
---------------------------
Para alterar a chance de vitória, edite o arquivo:
server/storage.ts, linha ~2822

ATUAL: const winChance = 0.15; // 15%
NOVO:  const winChance = 0.25; // 25% (exemplo)

B) ALTERANDO THRESHOLD DE RASPAGEM:
---------------------------------
Para tornar mais fácil/difícil raspar, edite:
client/src/components/ThreeDailyScratchCards.tsx, linha 120

ATUAL: if (progress >= 0.7 && ...) // 70%
NOVO:  if (progress >= 0.5 && ...) // 50% (mais fácil)

C) ALTERANDO NÚMERO DE CARTAS:
-----------------------------
Para mudar de 6 para outro número, edite:
server/storage.ts, função ensureUserDailyScratchCards
Altere o loop que cria cartas de 1-6 para 1-X

D) CONFIGURANDO PESOS DO ALGORITMO:
---------------------------------
Via painel Super Admin em /super-admin
Ou diretamente no banco na tabela scratchSystemConfig

======================================================================================
7. LOCALIZAÇÃO DO CÓDIGO
======================================================================================

COMPONENTES PRINCIPAIS:
---------------------
📁 client/src/components/ThreeDailyScratchCards.tsx
   ├── Componente principal das 6 cartas
   ├── Lógica de layout e exibição
   ├── Controle de estado das cartas
   └── Integração com API

📁 client/src/components/scratch-card.tsx  
   ├── Efeito de raspagem individual
   ├── Canvas HTML5 e manipulação de pixels
   ├── Som "xiado xiiii" 
   └── Animações e transições

API ENDPOINTS:
-------------
📁 server/routes.ts
   ├── GET /api/daily-scratch/cards (linha 2990)
   ├── POST /api/daily-scratch/cards/:cardId/scratch (linha 3010)
   ├── GET /api/daily-scratch/stats (linha 3057)
   └── POST /api/admin/daily-scratch/test (linha 2943)

ALGORITMO DE PROBABILIDADES:
---------------------------
📁 server/services/intelligentScratchAlgorithm.ts
   ├── *** FUNÇÃO PRINCIPAL: generateProductSuggestions() (linha 52) ***
   ├── *** SCORES: calculatePopularityScore() (linha 177) ***
   ├── *** PREÇOS: calculatePriceScore() (linha 216) ***
   ├── *** MARGEM: calculateMarginScore() (linha 234) ***
   ├── *** NOVIDADE: calculateNoveltyScore() (linha 251) ***
   └── *** CATEGORIA: calculateCategoryScore() (linha 268) ***

LÓGICA DE BANCO:
---------------
📁 server/storage.ts
   ├── *** PROBABILIDADE DE VITÓRIA: scratchDailyScratchCard() (~linha 2822) ***
   ├── ensureUserDailyScratchCards() - Criação das 6 cartas
   ├── getDailyScratchCard() - Buscar carta específica
   └── getUserScratchCardsStats() - Estatísticas do usuário

CONFIGURAÇÕES:
-------------
📁 shared/schema.ts
   ├── *** TABELA: scratchSystemConfig (linha 1150) ***
   ├── TABELA: dailyScratchCards (linha 1095)
   ├── TABELA: dailyPrizes (linha 1124)
   └── TABELA: algorithmSuggestions (linha 1234)

======================================================================================
                                   RESUMO EXECUTIVO
======================================================================================

O sistema de raspadinha diária é uma gamificação completa que:

✅ Gera 6 cartas únicas por usuário por dia
✅ Usa algoritmo inteligente para selecionar prêmios baseado em dados reais
✅ Implementa probabilidade configurável de vitória (padrão: 15%)
✅ Garante vitória após X tentativas (padrão: 1000)
✅ Oferece efeitos visuais e sonoros realistas
✅ Previne fraudes e duplicações
✅ Integra com sistema de cupons e lojas
✅ Fornece estatísticas detalhadas

*** PONTOS CRÍTICOS PARA AJUSTES ***:
- PROBABILIDADE DE VITÓRIA: server/storage.ts linha ~2822
- THRESHOLD DE RASPAGEM: ThreeDailyScratchCards.tsx linha 120  
- ALGORITMO DE SELEÇÃO: intelligentScratchAlgorithm.ts linha 52
- CONFIGURAÇÕES: Painel Super Admin /super-admin

======================================================================================
                                      FIM
======================================================================================