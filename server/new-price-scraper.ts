import { getJson } from "serpapi";
import type { InsertBrazilianPrice, InsertPriceHistory } from '@shared/schema';
import { nanoid } from 'nanoid';
import { db } from './db';
import { priceHistory } from '@shared/schema';

// Lojas confi√°veis brasileiras (prioridade alta)
const TRUSTED_BRAZILIAN_STORES = [
  'mercadolivre.com.br', 'mercado livre',
  'amazon.com.br', 'amazon brasil',
  'magazineluiza.com.br', 'magazine luiza', 'magazine',
  'americanas.com.br', 'americanas',
  'casasbahia.com.br', 'casas bahia',
  'extra.com.br', 'extra',
  'carrefour.com.br', 'carrefour',
  'submarino.com.br', 'submarino',
  'kabum.com.br', 'kabum',
  'shopee.com.br', 'shopee brasil',
  'zoom.com.br', 'zoom',
  'fastshop.com.br', 'fast shop',
  'pontofrio.com.br', 'ponto frio',
  'saraiva.com.br', 'saraiva',
  'walmart.com.br', 'walmart',
  'netshoes.com.br', 'netshoes',
  'centauro.com.br', 'centauro',
  'drogasil.com.br', 'drogasil',
  'riachuelo.com.br', 'riachuelo',
  // Lojas especializadas leg√≠timas
  'iplace', 'rei do celular', 'smiles', 'smiles.com.br',
  'buscape.com.br', 'buscape', 'buscap√©',
  'terabyteshop.com.br', 'terabyte',
  'pichau.com.br', 'pichau',
  'girafa.com.br', 'girafa',
  'mobly.com.br', 'mobly',
  'tok&stok', 'tokstok.com.br'
];

// Lojas internacionais confi√°veis (limitadas)
const TRUSTED_INTERNATIONAL_STORES = [
  'apple.com', 'apple store',
  'samsung.com', 'samsung',
  'sony.com', 'sony',
  'dell.com', 'dell',
  'hp.com', 'hp',
  'lenovo.com', 'lenovo',
  'microsoft.com', 'microsoft',
  'nike.com', 'nike',
  'adidas.com', 'adidas'
];

// Padr√µes de vendedores duvidosos para bloquear
const BLOCKED_SELLER_PATTERNS = [
  // Vendedores gen√©ricos do eBay
  /^[a-z0-9_-]+\d+$/i, // padr√µes como "seller123", "user_456"
  /wireless/i,
  /electronics/i,
  /gadgets/i,
  /store\d+/i,
  /shop\d+/i,
  /outlet/i,
  /deals/i,
  /marketplace/i,
  // Vendedores espec√≠ficos problem√°ticos
  /itsworthmore/i,
  /amazing-wireless/i,
  /tech-deals/i,
  /phone-shop/i,
  /mobile-store/i
];

// Fun√ß√£o para verificar se uma loja √© confi√°vel
function isTrustedStore(storeName: string): boolean {
  if (!storeName) return false;
  
  const storeNameLower = storeName.toLowerCase().trim();
  
  // Verificar se est√° na lista de lojas brasileiras confi√°veis
  const isBrazilianTrusted = TRUSTED_BRAZILIAN_STORES.some(trusted => 
    storeNameLower.includes(trusted.toLowerCase()) || 
    trusted.toLowerCase().includes(storeNameLower)
  );
  
  if (isBrazilianTrusted) {
    console.log(`‚úÖ LOJA CONFI√ÅVEL (brasileira): ${storeName}`);
    return true;
  }
  
  // Verificar se est√° na lista de lojas internacionais confi√°veis
  const isInternationalTrusted = TRUSTED_INTERNATIONAL_STORES.some(trusted => 
    storeNameLower.includes(trusted.toLowerCase()) || 
    trusted.toLowerCase().includes(storeNameLower)
  );
  
  if (isInternationalTrusted) {
    console.log(`‚úÖ LOJA CONFI√ÅVEL (internacional): ${storeName}`);
    return true;
  }
  
  // Verificar se corresponde a padr√µes de vendedores duvidosos
  const isBlockedSeller = BLOCKED_SELLER_PATTERNS.some(pattern => 
    pattern.test(storeNameLower)
  );
  
  if (isBlockedSeller) {
    console.log(`üö´ VENDEDOR BLOQUEADO: ${storeName}`);
    return false;
  }
  
  // Se n√£o est√° nas listas confi√°veis nem bloqueadas, √© suspeito
  console.log(`‚ö†Ô∏è LOJA SUSPEITA (n√£o verificada): ${storeName}`);
  return false; // Bloquear por padr√£o lojas n√£o verificadas
}

/**
 * Fun√ß√£o para buscar pre√ßos m√©dios usando SerpAPI Google Shopping
 * Baseada no c√≥digo limpo fornecido pelo usu√°rio
 */
export async function getAveragePrices(productName: string): Promise<{
  query: string;
  currency: string | null;
  average_price: number | null;
  count: number;
  results: Array<{
    title: string;
    store: string;
    link: string;
    price: number;
    currency: string;
  }>;
  note?: string;
}> {
  try {
    const q = productName.trim();
    const gl = "br"; // pa√≠s Brasil
    const hl = "pt-br"; // idioma portugu√™s

    if (!q) {
      return {
        query: q,
        currency: null,
        average_price: null,
        count: 0,
        results: [],
        note: "Nome do produto √© obrigat√≥rio."
      };
    }

    console.log(`üéØ Buscando pre√ßos para: "${q}"`);

    // Consulta no Google Shopping via SerpApi
    const data = await getJson({
      engine: "google_shopping",
      q,
      gl,         // pa√≠s (geo)
      hl,         // idioma
      api_key: process.env.SERPAPI_KEY,
      num: 30     // mais resultados para melhor amostra
    });

    const items = (data.shopping_results || [])
      // remove an√∫ncios "shopping_ads" e resultados sem pre√ßo
      .filter((it: any) => !it.position || it.position >= 1)
      .map((it: any) => {
        // Preferir extracted_price (num√©rico). Se n√£o existir, tentar parse de "price".
        let p = it.extracted_price;
        if (typeof p !== "number" && typeof it.price === "string") {
          // tenta extrair d√≠gitos, v√≠rgulas e pontos
          const raw = it.price.replace(/[^\d.,-]/g, "").replace(/\./g, "").replace(",", ".");
          const asNum = Number(raw);
          if (!Number.isNaN(asNum)) p = asNum;
        }
        return {
          title: it.title,
          source: it.source,       // loja
          link: it.link || it.product_link,
          currency: it.currency || 'BRL',
          price: typeof p === "number" ? p : null,
        };
      })
      .filter((it: any) => it.price !== null && it.price > 0);

    console.log(`üì¶ Encontrados ${items.length} produtos com pre√ßos v√°lidos`);

    // Filtrar apenas produtos principais (n√£o acess√≥rios) E de lojas confi√°veis
    const mainProducts = items.filter((item: any) => {
      const title = item.title?.toLowerCase() || '';
      const isAccessory = title.includes('capa') || title.includes('pel√≠cula') || 
                        title.includes('protetor') || title.includes('cabo') || 
                        title.includes('adaptador') || title.includes('case') ||
                        title.includes('capinha') || title.includes('cover') ||
                        title.includes('carregador') || title.includes('suporte');
      
      // Verificar se a loja √© confi√°vel
      const isFromTrustedStore = isTrustedStore(item.source || '');
      
      // Verificar pre√ßo m√≠nimo por categoria
      const searchLower = q.toLowerCase();
      let minPrice = 50;
      let maxPrice = 30000;
      
      if (searchLower.includes('iphone')) {
        minPrice = 1500;
        maxPrice = 15000;
      } else if (searchLower.includes('samsung') || searchLower.includes('galaxy')) {
        minPrice = 800;
        maxPrice = 8000;
      } else if (searchLower.includes('notebook') || searchLower.includes('laptop')) {
        minPrice = 1200;
        maxPrice = 12000;
      }

      const isValidPrice = item.price >= minPrice && item.price <= maxPrice;
      const isMainProduct = !isAccessory && isValidPrice && isFromTrustedStore;
      
      const status = !isFromTrustedStore ? 'LOJA BLOQUEADA' : 
                    isAccessory ? 'ACESS√ìRIO' : 
                    !isValidPrice ? 'PRE√áO INV√ÅLIDO' : 'V√ÅLIDO';
      
      console.log(`üîç ${item.title?.substring(0, 50)}... - R$ ${item.price} - ${item.source} - ${status}`);
      
      return isMainProduct;
    });

    // Opcional: deduplicar por loja (pega o menor pre√ßo por loja)
    const byStore = new Map();
    for (const item of mainProducts) {
      const key = (item.source || "").toLowerCase().trim();
      if (!byStore.has(key) || item.price < byStore.get(key).price) {
        byStore.set(key, item);
      }
    }
    const cleaned = Array.from(byStore.values());

    if (!cleaned.length) {
      return {
        query: q,
        results: [],
        currency: null,
        average_price: null,
        count: 0,
        note: "Nenhum produto principal encontrado (apenas acess√≥rios).",
      };
    }

    // Se as moedas divergirem, filtrar pela moeda majorit√°ria
    const currencyCounts = cleaned.reduce((acc: any, it: any) => {
      const c = it.currency || "UNKNOWN";
      acc[c] = (acc[c] || 0) + 1;
      return acc;
    }, {});
    const dominantCurrency = Object.entries(currencyCounts).sort((a: any, b: any) => b[1]-a[1])[0][0];
    const sameCurrency = cleaned.filter((it: any) => (it.currency || "UNKNOWN") === dominantCurrency);

    // NOVA REGRA: Excluir 3 menores e 3 maiores pre√ßos para ter m√©dia mais confi√°vel
    let pricesForAverage = sameCurrency;
    
    if (sameCurrency.length > 6) {
      // Ordenar por pre√ßo
      const sortedPrices = [...sameCurrency].sort((a: any, b: any) => a.price - b.price);
      
      // Remover 3 menores e 3 maiores
      pricesForAverage = sortedPrices.slice(3, -3);
      
      console.log(`üìä Aplicando regra de exclus√£o de extremos:`);
      console.log(`üìä Total inicial: ${sameCurrency.length} lojas`);
      console.log(`üìä Ap√≥s exclus√£o: ${pricesForAverage.length} lojas`);
      console.log(`üìä Removidos: 3 menores (R$ ${sortedPrices.slice(0, 3).map(p => p.price).join(', ')}) + 3 maiores (R$ ${sortedPrices.slice(-3).map(p => p.price).join(', ')})`);
    } else {
      console.log(`üìä Poucos resultados (${sameCurrency.length}), usando todos para m√©dia`);
    }

    const avg = pricesForAverage.reduce((sum: number, it: any) => sum + it.price, 0) / pricesForAverage.length;

    console.log(`‚úÖ RESULTADO FINAL:`);
    console.log(`üìä ${sameCurrency.length} lojas encontradas (${pricesForAverage.length} usadas para m√©dia)`);
    console.log(`üí∞ Pre√ßo m√©dio: R$ ${avg.toFixed(2)}`);
    
    console.log(`üè™ Lojas usadas no c√°lculo da m√©dia:`);
    pricesForAverage.forEach((item: any, index: number) => {
      console.log(`üè™ ${index + 1}. ${item.source} - R$ ${item.price}`);
    });

    return {
      query: q,
      currency: dominantCurrency === "UNKNOWN" ? null : dominantCurrency,
      average_price: Number(avg.toFixed(2)),
      count: pricesForAverage.length, // Usar apenas as lojas consideradas no c√°lculo
      results: pricesForAverage
        .sort((a: any, b: any) => a.price - b.price)
        .map(({ title, source, link, price, currency }: any) => ({
          title, store: source, link, price, currency
        })),
    };
  } catch (err) {
    console.error('‚ùå Erro na busca de pre√ßos:', err);
    return {
      query: productName,
      currency: null,
      average_price: null,
      count: 0,
      results: [],
      note: "Falha ao consultar a SerpApi."
    };
  }
}

// Fun√ß√£o para converter para o formato esperado pela aplica√ß√£o
export async function scrapeBrazilianPricesNew(productName: string): Promise<InsertBrazilianPrice[]> {
  console.log(`üåé Nova busca para: ${productName}`);
  
  const priceData = await getAveragePrices(productName);
  
  if (priceData.results.length === 0) {
    console.log('‚ùå Nenhum resultado encontrado');
    return [];
  }

  // Converter para formato da aplica√ß√£o
  const convertedResults: InsertBrazilianPrice[] = priceData.results.map(item => ({
    productName: item.title || productName,
    productBrand: null,
    productModel: null,
    productVariant: null,
    storeName: item.store || 'Loja n√£o identificada',
    storeUrl: '#',
    productUrl: item.link || '#',
    price: item.price.toFixed(2),
    currency: item.currency || 'BRL',
    availability: 'in_stock',
    isActive: true,
  }));

  // Salvar hist√≥rico
  await savePriceHistory(convertedResults);
  
  console.log(`‚úÖ Convertidos ${convertedResults.length} resultados`);
  return convertedResults;
}

// Fun√ß√£o para salvar hist√≥rico de pre√ßos
async function savePriceHistory(prices: InsertBrazilianPrice[]): Promise<void> {
  try {
    const historyEntries: InsertPriceHistory[] = prices.map(price => ({
      id: nanoid(),
      productName: price.productName,
      price: parseFloat(price.price).toString(),
      currency: price.currency || 'BRL',
      storeName: price.storeName,
      scrapedAt: new Date(),
      isActive: true
    }));

    if (historyEntries.length > 0) {
      await db.insert(priceHistory).values(historyEntries);
      console.log(`üìä Hist√≥rico salvo: ${historyEntries.length} pre√ßos registrados`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao salvar hist√≥rico:', error);
  }
}